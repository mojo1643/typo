
AccountsController
  A successful login with 'Remember me' checked
F    should not cause password to change (FAILED - 1)
  A successfully authenticated login
F    session gets a user (FAILED - 2)
F    sets typo_user_profile cookie (FAILED - 3)
F    redirects to /bogus/location (FAILED - 4)
F    redirects to /admin if no return (FAILED - 5)
F    redirects to /admin if no return and you are logged in (FAILED - 6)
F    should redirect to signup if no users (FAILED - 7)
  User is inactive
F    no user id goes in the session (FAILED - 8)
F    login should == "inactive" (FAILED - 9)
F    typo_user_profile cookie should be blank (FAILED - 10)
F    should render login action (FAILED - 11)
  Login with nil user and password
F    should render login action (FAILED - 12)
  Login gets the wrong password
F    no user in goes in the session (FAILED - 13)
F    login should == "bob" (FAILED - 14)
F    typo_user_profile cookie should be blank (FAILED - 15)
F    should render login action (FAILED - 16)
  GET /index
F    should redirect to login (FAILED - 17)
F    should redirect to signup (FAILED - 18)
  GET /login
F    should render action :login (FAILED - 19)
  GET /login with 0 existing users
F    should render action :signup (FAILED - 20)
F    should render :signup (FAILED - 21)
  with >0 existing user and allow_signup = 0
    GET signup
F      should redirect to login (FAILED - 22)
    POST signup without allow_signup
F      should redirect to login (FAILED - 23)
  with > 0 existing user and allow_signup = 1
    GET signup with allow_signup
F      should redirect to login (FAILED - 24)
    POST signup with allow_signup
F      should redirect to login (FAILED - 25)
  GET signup with 0 existing users
F    sets @user (FAILED - 26)
F    renders action signup (FAILED - 27)
  with 0 existing users and unconfigured blog
    when GET signup
.      redirects to setup
    when POST signup
.      redirects to setup
    when GET login
.      redirects to setup
    when POST login
.      redirects to setup
  POST signup with 0 existing users
F    creates and saves a user (FAILED - 28)
F    redirects to /account/confirm (FAILED - 29)
F    session gets a user (FAILED - 30)
  User is logged in
F    trying to log in once again redirects to admin/dashboard/index (FAILED - 31)
    when logging out
F      deletes the session[:user_id] (FAILED - 32)
F      deletes the session[:user] (FAILED - 33)
F      redirects to the login action (FAILED - 34)
F      deletes cookies containing credentials (FAILED - 35)
  when user has lost their password
    when GET
F      example at ./spec/controllers/accounts_controller_spec.rb:377 (FAILED - 36)
    when a known login or email is POSTed
F      example at ./spec/controllers/accounts_controller_spec.rb:384 (FAILED - 37)
    when an unknown login or email is POSTed
F      example at ./spec/controllers/accounts_controller_spec.rb:392 (FAILED - 38)
F      should display an error (FAILED - 39)

Admin::CacheController
  test_index
F    should render template index (FAILED - 40)

Admin::CategoriesController
F  test_index (FAILED - 41)
F  should create a new category (FAILED - 42)
F  test_update (FAILED - 43)
F  test_destroy with POST (FAILED - 44)
F  should edit an existing category (FAILED - 45)
  test_edit
F    should render template new (FAILED - 46)
F    should have valid category (FAILED - 47)
  test_destroy with GET
F    should render destroy template (FAILED - 48)

Admin::ContentController
  insert_editor action
F    should render _simple_editor (FAILED - 49)
F    should render _visual_editor (FAILED - 50)
F    should render _visual_editor even if editor param is set to unknow editor (FAILED - 51)
  with admin connection
    it should behave like index action
F      should render template index (FAILED - 52)
F      should see all published in index (FAILED - 53)
F      should restrict only by searchstring (FAILED - 54)
F      should restrict by searchstring and published_at (FAILED - 55)
F      should restrict to drafts (FAILED - 56)
F      should restrict to publication pending articles (FAILED - 57)
F      should restrict to withdrawn articles (FAILED - 58)
F      should restrict to withdrawn articles (FAILED - 59)
F      should restrict to published articles (FAILED - 60)
F      should fallback to default behavior (FAILED - 61)
    it should behave like new action
F      should create article with no comments (FAILED - 62)
F      should create a published article with a redirect (FAILED - 63)
F      should create a draft article without a redirect (FAILED - 64)
F      should create an unpublished article without a redirect (FAILED - 65)
F      should create an article published in the future without a redirect (FAILED - 66)
F      should create article with no pings (FAILED - 67)
F      should create an article linked to the current user (FAILED - 68)
F      should create new published article (FAILED - 69)
F      should redirect to show (FAILED - 70)
F      should send notifications on create (FAILED - 71)
F      should create an article in a category (FAILED - 72)
F      should create an article with tags (FAILED - 73)
F      should create article in future (FAILED - 74)
F      should correctly interpret time zone in :published_at (FAILED - 75)
F      should respect "GMT+0000 (UTC)" in :published_at (FAILED - 76)
F      should create a filtered article (FAILED - 77)
      GET
F        renders the 'new' template (FAILED - 78)
F        correctly converts multi-word tags (FAILED - 79)
      publishing a published article with an autosaved draft
F        updates the original (FAILED - 80)
F        deletes the draft (FAILED - 81)
      publishing a draft copy of a published article
F        updates the original (FAILED - 82)
F        deletes the draft (FAILED - 83)
      saving a published article as draft
F        leaves the original published (FAILED - 84)
F        leaves the original as is (FAILED - 85)
F        redirects to the index (FAILED - 86)
F        creates a draft (FAILED - 87)
      with an unrelated draft in the database
        saving new article as draft
F          leaves the original draft in existence (FAILED - 88)
    it should behave like destroy action
F      should_not destroy article by get (FAILED - 89)
F      should destroy article by post (FAILED - 90)
    it should behave like autosave action
      first time for a new article
F        should save new article with draft status and no parent article (FAILED - 91)
      second time for a new article
F        should save the same article with draft status and no parent article (FAILED - 92)
      for a published article
F        should create a draft article with proper attributes and existing article as a parent (FAILED - 93)
F        should not create another draft article with parent_id if article has already a draft associated (FAILED - 94)
F        should create a draft with the same permalink even if the title has changed (FAILED - 95)
      with an unrelated draft in the database
F        leaves the original draft in existence (FAILED - 96)
    edit action
F      should edit article (FAILED - 97)
F      should update article by edit action (FAILED - 98)
F      should allow updating body_and_extended (FAILED - 99)
F      should delete draft about this article if update (FAILED - 100)
F      should delete all draft about this article if update not happen but why not (FAILED - 101)
    resource_add action
F      should add resource (FAILED - 102)
    resource_remove action
F      should remove resource (FAILED - 103)
    auto_complete_for_article_keywords action
F      should return foo for keywords fo (FAILED - 104)
F      should return nothing for hello (FAILED - 105)
F      should return bar and bazz for ba keyword (FAILED - 106)
  with publisher connection
    it should behave like index action
F      should render template index (FAILED - 107)
F      should see all published in index (FAILED - 108)
F      should restrict only by searchstring (FAILED - 109)
F      should restrict by searchstring and published_at (FAILED - 110)
F      should restrict to drafts (FAILED - 111)
F      should restrict to publication pending articles (FAILED - 112)
F      should restrict to withdrawn articles (FAILED - 113)
F      should restrict to withdrawn articles (FAILED - 114)
F      should restrict to published articles (FAILED - 115)
F      should fallback to default behavior (FAILED - 116)
    it should behave like new action
F      should create article with no comments (FAILED - 117)
F      should create a published article with a redirect (FAILED - 118)
F      should create a draft article without a redirect (FAILED - 119)
F      should create an unpublished article without a redirect (FAILED - 120)
F      should create an article published in the future without a redirect (FAILED - 121)
F      should create article with no pings (FAILED - 122)
F      should create an article linked to the current user (FAILED - 123)
F      should create new published article (FAILED - 124)
F      should redirect to show (FAILED - 125)
F      should send notifications on create (FAILED - 126)
F      should create an article in a category (FAILED - 127)
F      should create an article with tags (FAILED - 128)
F      should create article in future (FAILED - 129)
F      should correctly interpret time zone in :published_at (FAILED - 130)
F      should respect "GMT+0000 (UTC)" in :published_at (FAILED - 131)
F      should create a filtered article (FAILED - 132)
      GET
F        renders the 'new' template (FAILED - 133)
F        correctly converts multi-word tags (FAILED - 134)
      publishing a published article with an autosaved draft
F        updates the original (FAILED - 135)
F        deletes the draft (FAILED - 136)
      publishing a draft copy of a published article
F        updates the original (FAILED - 137)
F        deletes the draft (FAILED - 138)
      saving a published article as draft
F        leaves the original published (FAILED - 139)
F        leaves the original as is (FAILED - 140)
F        redirects to the index (FAILED - 141)
F        creates a draft (FAILED - 142)
      with an unrelated draft in the database
        saving new article as draft
F          leaves the original draft in existence (FAILED - 143)
    it should behave like destroy action
F      should_not destroy article by get (FAILED - 144)
F      should destroy article by post (FAILED - 145)
    edit action
F      should redirect if edit article doesn't his (FAILED - 146)
F      should edit article (FAILED - 147)
F      should update article by edit action (FAILED - 148)
    destroy action can be access
F      should redirect when want destroy article (FAILED - 149)

Admin::DashboardController
  test index
F    should render the index template (FAILED - 150)

Admin::FeedbackController
  logged in admin user
    destroy action
F      should destroy feedback from article doesn't own (FAILED - 151)
      it should behave like destroy feedback with feedback from own article
F        should destroy feedback (FAILED - 152)
F        should redirect to feedback from article (FAILED - 153)
F        should not destroy feedback in get request (FAILED - 154)
    index action
F      should success (FAILED - 155)
F      should view only unconfirmed feedback (FAILED - 156)
F      should view only spam feedback (FAILED - 157)
F      should view unconfirmed_spam (FAILED - 158)
F      should view presumed_spam (FAILED - 159)
F      should view presumed_ham (FAILED - 160)
F      should get page 1 if page params empty (FAILED - 161)
    article action
F      should see all feedback on one article (FAILED - 162)
F      should see only spam feedback on one article (FAILED - 163)
F      should see only ham feedback on one article (FAILED - 164)
F      should redirect_to index if bad article id (FAILED - 165)
    create action
      by get access
F        should raise ActiveRecordNotFound if article doesn't exist (FAILED - 166)
F        should not create comment (FAILED - 167)
      by post access
F        should raise ActiveRecordNotFound if article doesn't exist (FAILED - 168)
F        should create comment (FAILED - 169)
F        should create comment mark as ham (FAILED - 170)
    edit action
F      should render edit form (FAILED - 171)
    update action
F      should update comment if post request (FAILED - 172)
F      should not  update comment if get request (FAILED - 173)
  publisher access
    destroy action
F      should not destroy feedback doesn't own (FAILED - 174)
      it should behave like destroy feedback with feedback from own article
F        should destroy feedback (FAILED - 175)
F        should redirect to feedback from article (FAILED - 176)
F        should not destroy feedback in get request (FAILED - 177)
    edit action
F      should not edit comment no own article (FAILED - 178)
F      should edit comment if own article (FAILED - 179)
    update action
F      should update comment if own article (FAILED - 180)
F      should not update comment if not own article (FAILED - 181)
    #bulkops action
F      should redirect to action (FAILED - 182)

Admin::PagesController
F  test_create (FAILED - 183)
F  test_update (FAILED - 184)
F  test_destroy (FAILED - 185)
F  should create a published page with a redirect (FAILED - 186)
F  should create an unpublished page without a redirect (FAILED - 187)
F  should create a page published in the future without a redirect (FAILED - 188)
  #index
F    should response success (FAILED - 189)
F    should response success with :page args (FAILED - 190)
  new
    without page params
F      should render template new and has a page object (FAILED - 191)
F      should assign to current user (FAILED - 192)
F      should have a text filter (FAILED - 193)
  test_edit
F    should render edit template (FAILED - 194)
  insert_editor action
F    should render _simple_editor (FAILED - 195)
F    should render _visual_editor (FAILED - 196)
F    should render _visual_editor even if editor param is set to unknow editor (FAILED - 197)

Admin::PostTypesController
F  index shoudld redirect to new (FAILED - 198)
F  test_create (FAILED - 199)
F  test_destroy with POST (FAILED - 200)
  test_new
F    should render template new (FAILED - 201)
  test_edit
F    should render template new (FAILED - 202)
F    test_update (FAILED - 203)
  test_destroy with GET
F    should render destroy template (FAILED - 204)

Admin::ProfilesController
  #index
F    should render index (FAILED - 205)
  successful POST to index
F    redirects to profile page (FAILED - 206)

Admin::RedirectsController
F  test_create (FAILED - 207)
F  test_create with empty from path (FAILED - 208)
F  test_update (FAILED - 209)
  #index
F    should display index with redirects (FAILED - 210)
  #edit
F    should render new template with valid redirect (FAILED - 211)
  test_destroy
    with GET
F      should render destroy template (FAILED - 212)
    with POST
F      should redirect to index (FAILED - 213)
F      should have no more redirects (FAILED - 214)

Admin::ResourcesController
F  test_destroy_image with POST (FAILED - 215)
F  test_upload (FAILED - 216)
  test_index
F    should render index template (FAILED - 217)
  test_destroy_image with get
F    should render template destroy (FAILED - 218)
F    should have a valid file (FAILED - 219)

Admin::SeoController
  #index
F    should render index (FAILED - 220)
  #permalinks
F    should render permalinks (FAILED - 221)
  #titles
F    should render titles (FAILED - 222)
  update action
F    should success (FAILED - 223)
F    should not save blog with bad permalink format (FAILED - 224)

Admin::SettingsController
  #index
F    should render index (FAILED - 225)
  write action
F    should be success (FAILED - 226)
  feedback action
F    should be sucess (FAILED - 227)
  redirect action
F    should be success (FAILED - 228)
  update action
F    should success (FAILED - 229)
F    should not save blog with bad permalink format (FAILED - 230)

Admin::SidebarController
  rendering
F    test_index (FAILED - 231)

Admin::TagsController
  index action
F    should be success (FAILED - 232)
F    should render template index (FAILED - 233)
  edit action
F    should be success (FAILED - 234)
F    should render template edit (FAILED - 235)
F    should assigns value :tag (FAILED - 236)
  destroy action with GET
F    should be success (FAILED - 237)
F    should have an id in the form destination (FAILED - 238)
F    should render template edit (FAILED - 239)
F    should assigns value :tag (FAILED - 240)
  destroy action with POST
F    should redirect to index (FAILED - 241)
F    should have one less tags (FAILED - 242)
  update action
F    should redirect to index (FAILED - 243)
F    should update tag (FAILED - 244)
F    should create a redirect from the old to the new (FAILED - 245)

Admin::TextfiltersController
  macro help action
F    should render success (FAILED - 246)

Admin::ThemesController
F  redirects to :index after the :switchto action (FAILED - 247)
F  returns succes for the :preview action (FAILED - 248)
  test index
F    assigns @themes for the :index action (FAILED - 249)

Admin::UsersController rough port of the old functional test
  when you are admin
F    test_index (FAILED - 250)
F    test_new (FAILED - 251)
F    test_destroy (FAILED - 252)
    #EDIT action
      with POST request
F        should redirect to index (FAILED - 253)
      with GET request
        with no id params
          it should behave like edit admin render
F            should render template edit (FAILED - 254)
F            should assigns tobi user (FAILED - 255)
        with id params
          it should behave like edit admin render
F            should render template edit (FAILED - 256)
F            should assigns tobi user (FAILED - 257)
  when you are not admin
F    don't see the list of user (FAILED - 258)
    EDIT Action
      try update another user
F        should redirect to login (FAILED - 259)
F        should not change user profile (FAILED - 260)

ApplicationController
.  safely caches a page

ArticlesController
F  should redirect category to /categories (FAILED - 261)
F  should redirect tag to /tags (FAILED - 262)
F  archives (FAILED - 263)
  index action
F    should be render template index (FAILED - 264)
F    should show some articles (FAILED - 265)
F    should have good link feed rss (FAILED - 266)
F    should have good link feed atom (FAILED - 267)
F    should have a canonical url (FAILED - 268)
F    should have googd title (FAILED - 269)
F    should have a custom tracking field (FAILED - 270)
  #search action
F    should render feed rss by search (FAILED - 271)
F    should render feed atom by search (FAILED - 272)
F    search with empty result (FAILED - 273)
    a valid search
F      should render template search (FAILED - 274)
F      should assigns articles (FAILED - 275)
F      should have good feed rss link (FAILED - 276)
F      should have good feed atom link (FAILED - 277)
F      should have a canonical url (FAILED - 278)
F      should have a good title (FAILED - 279)
F      should have content markdown interpret and without html tag (FAILED - 280)
F      should have a custom tracking field (FAILED - 281)
  #livesearch action
    with a query with several words
F      should be valid (FAILED - 282)
F      should render without layout (FAILED - 283)
F      should render template live_search (FAILED - 284)
F      should not have h3 tag (FAILED - 285)
F      should assign @search the search string (FAILED - 286)
  index for a month
F    should render template index (FAILED - 287)
F    should contain some articles (FAILED - 288)
F    should have a canonical url (FAILED - 289)
F    should have a good title (FAILED - 290)
F    should have a custom tracking field (FAILED - 291)

ArticlesController nosettings
.  redirects to setup

ArticlesController nousers
F  redirects to signup (FAILED - 292)

ArticlesController feeds
F  /articles.atom => an atom feed (FAILED - 293)
F  /articles.rss => an RSS 2.0 feed (FAILED - 294)
F  atom feed for archive should be valid (FAILED - 295)
F  RSS feed for archive should be valid (FAILED - 296)

ArticlesController the index
F  should ignore the HTTP Accept: header (FAILED - 297)

ArticlesController previewing
  with non logged user
F    should redirect to login (FAILED - 298)
  with logged user
F    should render template /articles/read (FAILED - 299)
F    should render template /home/ec2-user/environment/typo/themes/standard_issue/views/articles/read (FAILED - 300)
F    should render template /home/ec2-user/environment/typo/themes/true-blue-3/views/articles/read (FAILED - 301)
F    should render template /home/ec2-user/environment/typo/themes/typographic/views/articles/read (FAILED - 302)
F    should render template /home/ec2-user/environment/typo/themes/true-red/views/articles/read (FAILED - 303)
F    should render template /home/ec2-user/environment/typo/themes/bootstrap/views/articles/read (FAILED - 304)
F    should render template /home/ec2-user/environment/typo/themes/dirtylicious/views/articles/read (FAILED - 305)
F    should render template /home/ec2-user/environment/typo/themes/scribbish/views/articles/read (FAILED - 306)
F    should assigns article define with id (FAILED - 307)
F    should assigns last article with id like parent_id (FAILED - 308)

ArticlesController redirecting
F  should get good article with utf8 slug (FAILED - 309)
F  should get good article with pre-escaped utf8 slug using unescaped slug (FAILED - 310)
  with explicit redirects
F    should redirect from known URL (FAILED - 311)
F    should not redirect from unknown URL (FAILED - 312)
    and non-empty relative_url_root
F      should redirect (FAILED - 313)
F      should redirect if to_path includes relative_url_root (FAILED - 314)
F      should ignore the blog base_url if the to_path is a full uri (FAILED - 315)
  accessing old-style URL with "articles" as the first part
F    should redirect to article (FAILED - 316)
F    should redirect to article with url_root (FAILED - 317)
F    should redirect to article with articles in url_root (FAILED - 318)
  with permalink_format like %title%.html
    accessing various non-matching URLs
F      should not find '.htmlsecond-blog-article' (FAILED - 319)
F      should not find 'second-blog-article.html.html' (FAILED - 320)
F      should not find 'second-blog-article.html/foo' (FAILED - 321)
    accessing legacy URLs
F      should redirect from default URL format (FAILED - 322)
F      should redirect from old-style URL format with "articles" part (FAILED - 323)
    accessing an article
F      should render template read to article (FAILED - 324)
F      should assign article1 to @article (FAILED - 325)
      the resulting page
F        should have good rss feed link (FAILED - 326)
F        should have good atom feed link (FAILED - 327)
F        should have a canonical url (FAILED - 328)
F        should have a good title (FAILED - 329)
    rendering as atom feed
F      should render feedback atom feed (FAILED - 330)
    rendering as rss feed
F      should render rss20 partial (FAILED - 331)
  with a format containing a fixed component
F    should find the article if the url matches all components (FAILED - 332)
F    should not find the article if the url does not match the fixed component (FAILED - 333)
  with a custom format with several fixed parts and several variables
F    should find the article if the url matches all components (FAILED - 334)
F    should not find the article if the url only matches some components (FAILED - 335)

ArticlesController password protected
F  article alone should be password protected (FAILED - 336)
  #check_password
F    shows article when given correct password (FAILED - 337)
F    shows password form when given incorrect password (FAILED - 338)

ArticlesController assigned keywords
F  article with categories should have meta keywords (FAILED - 339)
F  article with neither categories nor tags should not have meta keywords (FAILED - 340)
F  index without option and no blog keywords should not have meta keywords (FAILED - 341)
F  index without option but with blog keywords should have meta keywords (FAILED - 342)

AuthorsController
  #show
    as html
F      renders the :show template (FAILED - 343)
F      assigns author (FAILED - 344)
F      assigns articles as published articles (FAILED - 345)
      when rendered
F        has a link to the rss feed (FAILED - 346)
F        has a link to the atom feed (FAILED - 347)
    as an atom feed
F      assigns articles as published articles (FAILED - 348)
F      renders the atom template (FAILED - 349)
F      does not render layout (FAILED - 350)
    as an rss feed
F      assigns articles as published articles (FAILED - 351)
F      renders the rss template (FAILED - 352)
F      does not render layout (FAILED - 353)

AuthorsController SEO options
F  should never have meta keywords with deactivated option (FAILED - 354)
F  should never have meta keywords with deactivated option (FAILED - 355)

BackendController
  when called through Blogger API
F    test_blogger_delete_post (FAILED - 356)
F    test_blogger_get_users_blogs (FAILED - 357)
F    test_blogger_get_user_info (FAILED - 358)
F    test_blogger_new_post (FAILED - 359)
F    test_blogger_new_post_no_title (FAILED - 360)
F    test_blogger_new_post_with_categories (FAILED - 361)
F    test_blogger_new_post_with_non_existing_categories (FAILED - 362)
F    test_blogger_fail_authentication (FAILED - 363)
  when called through the MetaWeblog API
F    test_meta_weblog_get_categories (FAILED - 364)
F    test_meta_weblog_get_post (FAILED - 365)
F    test_meta_weblog_get_recent_posts (FAILED - 366)
F    test_meta_weblog_delete_post (FAILED - 367)
F    test_meta_weblog_new_post_fails (FAILED - 368)
F    test_meta_weblog_new_post (FAILED - 369)
F    test_meta_weblog_new_unpublished_post_with_blank_creation_date (FAILED - 370)
F    should set categories if specified in new post (FAILED - 371)
F    test_meta_weblog_edit_unpublished_post_with_old_creation_date (FAILED - 372)
F    test_meta_weblog_new_media_object (FAILED - 373)
F    test_meta_weblog_fail_authentication (FAILED - 374)
F    test_meta_weblog_should_preserve_date_time_on_roundtrip_edit (FAILED - 375)
    when editing a post
F      test_meta_weblog_edit_post (FAILED - 376)
F      should set categories if specified (FAILED - 377)
  when called through the Movable Type API
F    test_mt_get_category_list (FAILED - 378)
F    test_mt_get_post_categories (FAILED - 379)
F    test_mt_get_recent_post_titles (FAILED - 380)
F    test_mt_set_post_categories (FAILED - 381)
F    test_mt_supported_text_filters (FAILED - 382)
F    test_mt_supported_methods (FAILED - 383)
F    test_mt_get_trackback_pings (FAILED - 384)
F    should publish post (FAILED - 385)
F    test_mt_fail_authentication (FAILED - 386)

CategoriesController /index
  normally
F    example at ./spec/controllers/categories_controller_spec.rb:18 (FAILED - 387)
F    example at ./spec/controllers/categories_controller_spec.rb:19 (FAILED - 388)
F    example at ./spec/controllers/categories_controller_spec.rb:20 (FAILED - 389)
    when rendered
F      example at ./spec/controllers/categories_controller_spec.rb:25 (FAILED - 390)
  if :index template exists
F    should render :index (FAILED - 391)

CategoriesController#show
F  should be successful (FAILED - 392)
F  should render :show by default (FAILED - 393)
F  should fall back to rendering articles/index (FAILED - 394)
F  should render personal when template exists (FAILED - 395)
F  should show only published articles (FAILED - 396)
F  should set the page title to "Category Personal" (FAILED - 397)
F  should render the atom feed for /articles/category/personal.atom (FAILED - 398)
F  should render the rss feed for /articles/category/personal.rss (FAILED - 399)
  when rendered
F    should have a canonical URL (FAILED - 400)

CategoriesController#show with a non-existent category
.  should raise ActiveRecord::RecordNotFound

CategoriesController empty category life-on-mars
F  should redirect to home when the category is empty (FAILED - 401)

CategoriesController password protected article
F  should be password protected when shown in category (FAILED - 402)

CategoriesController SEO Options
F  category without meta keywords and activated options (use_meta_keyword ON) should not have meta keywords (FAILED - 403)
F  category with keywords and activated option (use_meta_keyword ON) should have meta keywords (FAILED - 404)
F  category with meta keywords and deactivated options (use_meta_keyword off) should not have meta keywords (FAILED - 405)
F  with unindex_categories (set ON), should have rel nofollow (FAILED - 406)
F  without unindex_categories (set OFF), should not have rel nofollow (FAILED - 407)

CommentsController
  #create
F    should redirect to the article (FAILED - 408)
    Basic comment creation
F      should assign the new comment to @comment (FAILED - 409)
F      should assign the article to @article (FAILED - 410)
F      should save the comment (FAILED - 411)
F      should set the author (FAILED - 412)
F      should set an author cookie (FAILED - 413)
F      should set a gravatar_id cookie (FAILED - 414)
F      should set a url cookie (FAILED - 415)
  AJAX creation
F    should render the comment partial (FAILED - 416)
  #index
    scoped index
F      GET 2007/10/11/slug/comments should redirect to /2007/10/11/slug#comments (FAILED - 417)
    without format
F      should be successful (FAILED - 418)
F      should not bother fetching any comments (FAILED - 419)
    with :format => 'atom'
      without article
F        is succesful (FAILED - 420)
F        passes the comments to the template (FAILED - 421)
F        should return an atom feed (FAILED - 422)
      with an article
F        should return an atom feed (FAILED - 423)
    with :format => 'rss'
      without article
F        is succesful (FAILED - 424)
F        passes the comments to the template (FAILED - 425)
F        should return an rss feed (FAILED - 426)
      with article
F        should return an rss feed (FAILED - 427)

GroupingController
  should set meta robots to noindex follow when
F    tag controller and unindex_tags options is true (FAILED - 428)
F    category controller and unindex_categories optinos is true (FAILED - 429)
F    page params not blank and unindex_tags and unindex_categories are set to false (FAILED - 430)
  should not set meta robots to noindex follow when
F    tag controller and unindex_tags options is false and page params nil (FAILED - 431)
F    categoriy controller and unindex_categories options is false and page params nil (FAILED - 432)

SetupController
  when no blog is configured
    GET setup
.      should render template matcher "index"
    POST setup
.      should redirect to {:action=>"confirm"}
.      should correctly initialize blog and users
.      should log in admin user
  POST setup with incorrect parameters
.    empty blog name should raise an error
.    empty email should raise an error
  when a blog is configured and has some users
    GET setup
F      example at ./spec/controllers/setup_controller_spec.rb:66 (FAILED - 433)
    POST setup
F      example at ./spec/controllers/setup_controller_spec.rb:75 (FAILED - 434)
F      should not initialize blog and users (FAILED - 435)

TagsController /index
  normally
F    example at ./spec/controllers/tags_controller_spec.rb:16 (FAILED - 436)
F    example at ./spec/controllers/tags_controller_spec.rb:17 (FAILED - 437)
F    example at ./spec/controllers/tags_controller_spec.rb:18 (FAILED - 438)
F    example at ./spec/controllers/tags_controller_spec.rb:19 (FAILED - 439)
  if :index template exists
F    should render :index (FAILED - 440)

TagsController showing a single tag
  with some articles
F    should be successful (FAILED - 441)
F    should retrieve the correct set of articles (FAILED - 442)
F    should render :show by default (FAILED - 443)
F    should fall back to rendering articles/index (FAILED - 444)
F    should set the page title to "Tag foo" (FAILED - 445)
F    should render the atom feed for /articles/tag/foo.atom (FAILED - 446)
F    should render the rss feed for /articles/tag/foo.rss (FAILED - 447)
  without articles
F    should redirect to main page (FAILED - 448)

TagsController showing tag "foo"
F  should have good rss feed link in head (FAILED - 449)
F  should have good atom feed link in head (FAILED - 450)
F  should have a canonical URL (FAILED - 451)

TagsController showing a non-existant tag
F  should redirect to main page (FAILED - 452)

TagsController password protected article
F  article in tag should be password protected (FAILED - 453)

TagsController SEO Options
F  should have rel nofollow (FAILED - 454)
F  should not have rel nofollow (FAILED - 455)
F  should not have meta keywords with deactivated option and no blog keywords (FAILED - 456)
F  should not have meta keywords with deactivated option and blog keywords (FAILED - 457)
F  should not have meta keywords with activated option and no blog keywords (FAILED - 458)
F  should have meta keywords with activated option and blog keywords (FAILED - 459)

ThemeController
F  test_stylesheets (FAILED - 460)
F  test_images (FAILED - 461)
F  test_malicious_path (FAILED - 462)
F  test_view_theming (FAILED - 463)
*  disabled_test_javascript (PENDING: Not yet implemented)

TrackbacksController
  #index
    with :format => atom
.      is succesful
.      passes the trackbacks to the template
.      renders the atom template
    with :format => rss
.      is succesful
.      passes the trackbacks to the template
.      renders the atom template

XmlController
  #feed
.    responds :missing when given a bad format
.    responds :missing when given a bad type
    without format parameter
.      redirects main feed to articles RSS feed
.      redirects comments feed to Comments RSS feed
.      redirects trackbacks feed to TrackbacksController RSS feed
.      redirects category feed to Category RSS feed
.      redirects tag feed to Tag RSS feed
    with format rss20
.      redirects main feed to articles RSS feed
.      redirects comments feed to comments RSS feed
.      redirects trackbacks feed to TrackbacksController RSS feed
.      redirects category feed to category RSS feed
.      redirects tag feed to tag RSS feed
    with format atom10
.      redirects main feed to articles Atom feed
.      redirects comments feed to comments Atom feed
.      redirects trackbacks feed to TrackbacksController Atom feed
.      redirects category feed to category Atom feed
.      redirects tag feed to tag Atom feed
    with format atom03
.      redirects main feed to articles Atom feed
    for an article
      without format parameter
.        redirects article feed to Article RSS feed
      with format rss20
.        redirects the article feed to the article RSS feed
      with format atom10
.        redirects the article feed to the article Atom feed
  #articlerss
.    redirects permanently to the article RSS feed
  #commentrss
.    redirects permanently to the comment RSS feed
  #trackbackrss
.    redirects permanently to the trackback RSS feed
  #rsd
.    is succesful
.    returns a valid XML response
  #feed with googlesitemap format
.    is succesful
.    returns a valid XML response

ApplicationHelper
  #render_flash
F    should render empty string if no flash (FAILED - 464)
F    should render a good render if only one notice (FAILED - 465)
F    should render the notice and error flash (FAILED - 466)
  #link_to_permalink
    for a simple ascii-only permalink
F      example at ./spec/helpers/application_helper_spec.rb:26 (FAILED - 467)
F      example at ./spec/helpers/application_helper_spec.rb:27 (FAILED - 468)
    for a multibyte permalink
F      escapes the multibyte characters (FAILED - 469)
  #display_date
F    should return date with format %d/%m/%y (FAILED - 470)
F    should return date with format %m/%m/%y (FAILED - 471)
F    should return date with format %d %b %Y (FAILED - 472)
F    should return date with format %b %d %Y (FAILED - 473)
F    should return time with format %I:%M%p (FAILED - 474)
F    should return time with format %H:%M (FAILED - 475)
F    should return time with format %Hh%M (FAILED - 476)

AuthorsHelper display_profile_item
.  should display the item as a list item if show_item is true
.  should NOT display the item as a list item if show_item is false
.  should display a link if the item is an url

GroupingsHelper
  #ul_tag_for
.    returns plain ul by default

SidebarHelper
  #render_sidebars
    with an invalid sidebar
F      should return a friendly error message (FAILED - 477)
    with a valid sidebar
F      should render the sidebar (FAILED - 478)

TextFilterPlugin::Macro
  #self.attributes_parse
.    should parse lang="ruby" to {"lang" => "ruby"}
.    should parse lang='ruby' to {'lang' => 'ruby'}

String
  #to_title
.    should handle the case where item.body is nil
.    should build a nice permalink from an accentuated string

Given a brand new AmazonSidebar
.  title should be 'Cited books'
.  associate_id should be 'justasummary-20'
.  maxlinks should be 4
.  description should be 'Adds sidebar links...'
.  sidebar should be valid

With no amazon sidebars
.  hash initialization should set attributes correctly

CommentClosing from Test::Unit; no I don't know why it's in article_closing_spec.rb
F  test_new_article_should_be_open_if_auto_close_is_zero (FAILED - 479)
F  test_old_article_should_be_open_if_auto_close_is_zero (FAILED - 480)
F  test_new_article_should_be_open_if_auto_close_is_thirty (FAILED - 481)
F  test_old_article_should_be_closed_if_auto_close_is_thirty (FAILED - 482)

Article
.  test_content_fields
.  test_edit_url
.  test_delete_url
.  test_feed_url
.  test_create
.  test_permalink_with_title
.  test_strip_title
.  test_send_pings
.  test_send_multiple_pings
.  test_find_published_by_tag_name
F  test_find_published (FAILED - 483)
.  test_just_published_flag
.  test_future_publishing
.  test_future_publishing_without_published_flag
*  test_triggers_are_dependent (PENDING: Needs a fix for Rails ticket #5105: has_many: Dependent deleting does not work with STI)
.  test_find_published_by_category
.  test_find_published_by_nonexistent_category_raises_exception
.  test_destroy_file_upload_associations
.  should notify
.  test_withdrawal
.  should get only ham not spam comment
.  test_can_ping_fresh_article_iff_it_allows_pings
.  test_cannot_ping_old_article
  #permalink_url
    with hostname
.      should == "http://myblog.net/2004/06/01/article-3"
    without hostname
.      should == "/2004/06/01/article-3"
    with a multibyte permalink
.      escapes the multibyte characters
    with a permalink containing a space
.      escapes the space as '%20', not as '+'
    with a permalink containing a plus
.      does not escape the plus
  #initialize
.    accepts a settings field in its parameter hash
  #stripped_title
.    works for simple cases
.    strips html
.    does not escape multibyte characters
.    is called upon saving the article
  the html_urls method
.    extracts URLs from the generated body html
.    should only match the href attribute
.    should match across newlines
.    should match with single quotes
.    should match with no quotes
  Testing redirects
.    a new published article gets a redirect
.    a new unpublished article should not get a redirect
.    Changin a published article permalink url should only change the to redirection
  with tags
.    recieves tags from the keywords property
.    changes tags when changing keywords
.    empties tags when keywords is set to ''
.    properly deals with dots and spaces
*    lets the tag collection survive a load-save cycle (PENDING: Not yet implemented)
  #default_text_filter
.    returns the blog's text filter
  #access_by?
.    admin should have access to an article written by another
.    admin should have access to an article written by himself
  body_and_extended
.    should combine body and extended content
.    should not insert <!--more--> tags if extended is empty
  #search
    with several words and no result
F      should be empty (FAILED - 484)
    with one word and result
.      should have two items
  body_and_extended=
.    should split apart values at <!--more-->
.    should remove newlines around <!--more-->
.    should make extended empty if no <!--more--> tag
.    should preserve extra <!--more--> tags
.    should be settable via self.attributes=
  #comment_url
.    should render complete url of comment
  #preview_comment_url
.    should render complete url of comment
  #published_at_like
.    should return all content for the year if only year sent
.    should return all content for the month if year and month sent
.    should return all content on this date if date send
  #has_child?
.    should be true if article has one to link it by parent_id
.    should be false if article has no article to link it by parent_id
  self#last_draft(id)
.    should return article if no draft associated
.    should return draft associated to this article if there are one
  an article published just before midnight UTC
    #permalink_url
.      uses UTC to determine correct day
    #find_by_permalink
.      uses UTC to determine correct day
  an article published just after midnight UTC
    #permalink_url
.      uses UTC to determine correct day
    #find_by_permalink
.      uses UTC to determine correct day
  #get_or_build
    when no params given
.      should return article
      should have blog default value for
.        allow_comments
.        allow_pings
.        should have default text filter
    when id params given
.      should return article

Blog
  #initialize
.    accepts a settings field in its parameter hash

A blog
.  values boolify like Perl
  when running in with http://myblog.net
    blog.url_for
      with a hash argument and only_path = true
.        should == "/category/1"
      with a string argument and only_path = true
.        should == "/category/1"
    blog.url_for
      with a hash argument and only_path = false
.        should == "http://myblog.net/category/1"
      with a string argument and only_path = false
.        should == "http://myblog.net/category/1"
  when running in with http://myblog.net/sub-uri
    blog.url_for
      with a hash argument and only_path = true
.        should == "/sub-uri/category/1"
      with a string argument and only_path = true
.        should == "/sub-uri/category/1"
    blog.url_for
      with a hash argument and only_path = false
.        should == "http://myblog.net/sub-uri/category/1"
      with a string argument and only_path = false
.        should == "http://myblog.net/sub-uri/category/1"

The first blog
F  should be the only blog allowed (FAILED - 485)

The default blog
F  should pick up updates after a cache clear (FAILED - 486)

Given no blogs, a new default blog
F  should be valid after filling the title (FAILED - 487)
F  should be valid without filling the title (FAILED - 488)
.  should not be valid after setting an empty title

Valid permalink in blog
.  not valid with foo
.  not valid with year
.  not valid with day
.  not valid with month
.  not valid with title
.  not valid with %title
.  not valid with title%
.  not valid with /year/month/day/title
.  not valid with %year%
.  not valid with %day%
.  not valid with %month%
.  not valid with %title%.html.atom
.  not valid with %title%.html.rss
F  should be valid with only %title% (FAILED - 489)
F  should be valid with only %title%.html (FAILED - 490)
F  should be valid with only /hello/all/%year%/%title% (FAILED - 491)
F  should be valid with only atom/%title%.html (FAILED - 492)
F  should be valid with only ok/rss/%title%.html (FAILED - 493)
.  should not be valid without %title% in

Given a published article
F  An unchanged article does not invalidate the cache (FAILED - 494)
F  changing the body smashes the cache (FAILED - 495)
F  withdrawing it smashes the cache (FAILED - 496)
F  destroying it smashes the cache (FAILED - 497)
F  withdrawing, then destroying it smashes the cache (FAILED - 498)

Given an unpublished article
F  publishing smashes the cache (FAILED - 499)
F  changing it keeps the cache (FAILED - 500)
F  destroying it keeps the cache (FAILED - 501)

Given an unpublished spammy comment
F  changing it does not alter the cache (FAILED - 502)
F  publishing it does alter the cache (FAILED - 503)
F  destroying it does not alter the cache (FAILED - 504)

Given a published comment
F  changing it destroys the cache (FAILED - 505)
F  unpublishing it destroys the cache (FAILED - 506)
F  destroying it destroys the cache (FAILED - 507)

Given an unpublished spammy trackback
F  changing it does not alter the cache (FAILED - 508)
F  publishing it does alter the cache (FAILED - 509)
F  destroying it does not alter the cache (FAILED - 510)

Given a published trackback
F  changing it destroys the cache (FAILED - 511)
F  unpublishing it destroys the cache (FAILED - 512)
F  destroying it destroys the cache (FAILED - 513)

Given the results of Category.find_all_with_article_counters
.  Categories should be sorted by category.position
.  Counts should be correct

Category
F  should know published_articles (FAILED - 514)
F  empty permalink should be converted (FAILED - 515)
F  category with permalink should not have permalink generated (FAILED - 516)

Category
  permalink
F    example at ./spec/models/category_spec.rb:45 (FAILED - 517)

Comment
.  should have good relation
F  should have good default filter (FAILED - 518)
  #permalink_url
F    should render permalink to comment in public part (FAILED - 519)
  #edit_url
F    should get a url where edit comment in admin (FAILED - 520)
  #delete_url
F    should get the delete url of comment in admin part (FAILED - 521)
  #save
F    should save good comment (FAILED - 522)
F    should save spam comment (FAILED - 523)
F    should not save in invalid article (FAILED - 524)
F    should change old comment (FAILED - 525)
F    should save a valid comment (FAILED - 526)
F    should not save with article not allow comment (FAILED - 527)
  #create
F    should create comment (FAILED - 528)
F    preserves urls starting with https:// (FAILED - 529)
F    preserves urls starting with http:// (FAILED - 530)
F    prepends http:// to urls without protocol (FAILED - 531)
  #spam?
F    should reject spam rbl (FAILED - 532)
F    should not define spam a comment rbl with lookup succeeds (FAILED - 533)
F    should reject spam with uri limit (FAILED - 534)
  reject xss
F    should reject with filter '' (FAILED - 535)
F    should reject with filter 'textile' (FAILED - 536)
F    should reject with filter 'markdown' (FAILED - 537)
F    should reject with filter 'smartypants' (FAILED - 538)
F    should reject with filter 'markdown smartypants' (FAILED - 539)
  change state
F    should becomes withdraw (FAILED - 540)
F    should becomes not published in article if withdraw (FAILED - 541)
F    should becomes confirmed if withdrawn (FAILED - 542)
  with feedback moderation enabled
F    should save comment as presumably spam (FAILED - 543)
F    should save comment as confirmed ham (FAILED - 544)

Given a new blog
.  #blog_name should be My Shiny Weblog!
.  #blog_subtitle should be ""
.  #geourl_location should be ""
.  #canonical_server_url should be ""
.  #lang should be en_US
.  Global spam protection is not enabled
.  #sp_article_auto_close should be 0
.  #sp_url_limit should be 0
.  #sp_akismet_key should be blank
.  #use_recaptcha should be false
.  #text_filter and #comment_text_filter should be markdown smartypants
.  #limit_article_display and #limit_rss_display should be 10
.  Pings should not be allowed by default
.  Comments should be allowed unmoderated by default
.  Should not link to author
.  Should not hide extended on rss
.  #theme should be "Bootstrap"
.  should not use any avatar plugin
.  #global_pings_disable should be false
.  should ping technorati, blog.gs and weblogs.com
.  should send outbound pings
.  #email_from should be typo@example.com
.  #editor should be visual
.  #date format should be day/month/year hour:minute
.  Thumb and medium image size
.  Default meta keyword and description should be empty
.  Google analytics and Webmaster toold should be empty
.  #feedburner should be empty
.  RSS description should be disable but not empty
.  Permalink format should be /year/month/day/title
.  Robots.txt should be empty
.  Categories and tags should be indexed
.  Displays 10 elements in admin
.  Links are nofollow by default
.  Use of canonical URL is disabled by default
.  Use of meta keywords is enabled by default
.  #is_okay should be false until #blog_name is explicitly set
.  home display template is blog name | blog description | meta keywords
.  article template is title | blog name with excerpt in the description
.  page template is title | blog name with excerpt in the description
.  paginated template is title | blog name | page with keywords in the description
.  category title template is Category: name | blog_name | page
.  category description template is name | description | blog description page
.  tags title template is Tag: name | blog_name | page
.  tags description template is name | description | blog description page
.  author title template is name | blog_name
.  author description template is name | blog name | blog description page
.  archives title template is Archives for blog name date page
.  archives description template is Archives for blog name date page blog description
.  search title template is Archives for blog name date page
.  search description template is Archives for blog name date page blog description
.  custom tracking fiels is empty
.  404 title should be page not found
.  404 text should be "The page you are looking for has moved or does not exist"

Given a new user
.  New comments on self articles should be notified
.  Default editor is visual
.  Firstname is empty
.  Lastname is empty
.  Nickname is empty
.  Description is empty
.  URL is empty
.  MSN is empty
.  aim is empty
.  Yahoo ID is empty
.  Twitter is empty
.  Jabber is empty
.  URL display in user profile is not enabled
.  MSN display in user profile is not enabled
.  AIM display in user profile is not enabled
.  Yahoo ID display in user profile is not enabled
.  Twitter display in user profile is not enabled
.  Jabber display in user profile is not enabled
.  Admin theme should be blue

Given a new article
.  A new article should get an empty password

Given a new page
.  A new page should get an empty password

Content
  #short_url
    normally
.      returns the blog's base url combined with the redirection's from path
    when the blog is in a sub-uri
.      includes the sub-uri path

FeedbackStates from Test::Unit
F  test_ham_all_the_way (FAILED - 545)
F  test_spam_all_the_way (FAILED - 546)
F  test_presumed_spam_marked_as_ham (FAILED - 547)
F  test_presumed_ham_marked_as_spam (FAILED - 548)

Notification
.  test_truth

PageCache
  PageCache#self.sweep_all
.    should destroy all file in cache directory with path

Page
  #initialize
.    accepts a settings field in its parameter hash

Testing redirects
F  a new published page gets a redirect (FAILED - 549)
F  a new unpublished page should not get a redirect (FAILED - 550)
F  Changin a published article permalink url should only change the to redirection (FAILED - 551)

Given the fixture :first_page
F  Pages cannot have the same name (FAILED - 552)
F  should give a sanitized title (FAILED - 553)
  #permalink_url
F    example at ./spec/models/page_spec.rb:52 (FAILED - 554)

Given no pages
.  An empty page is invalid
.  A page is valid with a title and body
.  A page is invalid without a title
.  A page is invalid without a body
.  should use sanitize title to set page name

Given a valid page
F  default filter should be fetched from the blog (FAILED - 555)

Ping::Pinger with Test::Unit
F  test_pingback_url_nil (FAILED - 556)
F  test_pingback_url_from_body (FAILED - 557)
F  test_pingback_url (FAILED - 558)

Given a post which references a pingback enabled article
F  Pingback sent to url found in referenced header (FAILED - 559)
F  Pingback sent to url found in referenced body (FAILED - 560)
F  Pingback sent when new article is saved (FAILED - 561)

An article links to another article, which contains a trackback URL
F  Trackback URL is detected and pinged (FAILED - 562)
F  sends a trackback without html tag in excerpt (FAILED - 563)
F  sends a trackback without markdown tag in excerpt (FAILED - 564)

Given a remote site to notify, eg technorati
F  we can ping them correctly (FAILED - 565)

PostType
F  post types are unique (FAILED - 566)
  Given a new post type
F    should give a valid post type (FAILED - 567)
F    should have a sanitized permalink (FAILED - 568)
F    should have a sanitized permalink with a (FAILED - 569)

Given an empty redirects table
.  redirects are unique

Resource
.  resources created with the same name as an existing resource don't overwrite the old resource
.  a resource deletes its associated file on destruction
  #fullpath
.    should be ::Rails.root.to_s + "/public/files/" + resource.filename
  scopes
    #without_images
.      should list resource that are not image (based on mime type)
    #images
.      should list only images (based on mime type)
    #by_filename
.      should sort resource by filename
    #by_created_at
.      should sort resource by created_at DESC
    #without_images_by_filename
.      should combine 2 scopes

RouteCache
.  test_cache_clear

Sidebar
  #available_sidebars
.    finds at least the standard sidebars
  #find_all_visible
F    returns only the sidebar with active position (FAILED - 570)
  #find with an invalid sidebar in the database
.    skips the invalid active sidebar
  #content_partial
.    bases the partial name on the class name

Given a new StaticSidebar
.  title should be Links
.  body should be our default
.  description should be set correctly

Tag
F  we can Tag.get by name (FAILED - 571)
F  tags are unique (FAILED - 572)
F  display names with spaces can be found by dash joined name (FAILED - 573)
F  articles can be tagged (FAILED - 574)
F  find_all_with_article_counters finds 2 tags (FAILED - 575)
  permalink_url
F    should be of form /tag/<name> (FAILED - 576)
  #published_articles
F    should return only published articles (FAILED - 577)

with tags foo, bar and bazz
.  find_with_char('f') should be return foo
.  find_with_char('v') should return empty data
.  find_with_char('ba') should return tag bar and bazz

With the list of available filters
F  #filter text by name (FAILED - 578)
  #available_filters
F    example at ./spec/models/text_filter_spec.rb:15 (FAILED - 579)
F    example at ./spec/models/text_filter_spec.rb:16 (FAILED - 580)
F    example at ./spec/models/text_filter_spec.rb:17 (FAILED - 581)
F    example at ./spec/models/text_filter_spec.rb:18 (FAILED - 582)
F    example at ./spec/models/text_filter_spec.rb:19 (FAILED - 583)
F    example at ./spec/models/text_filter_spec.rb:20 (FAILED - 584)
F    example at ./spec/models/text_filter_spec.rb:21 (FAILED - 585)
F    example at ./spec/models/text_filter_spec.rb:22 (FAILED - 586)
F    example at ./spec/models/text_filter_spec.rb:23 (FAILED - 587)
  #macro_filters
F    example at ./spec/models/text_filter_spec.rb:28 (FAILED - 588)
F    example at ./spec/models/text_filter_spec.rb:29 (FAILED - 589)
F    example at ./spec/models/text_filter_spec.rb:30 (FAILED - 590)
F    example at ./spec/models/text_filter_spec.rb:31 (FAILED - 591)
F    example at ./spec/models/text_filter_spec.rb:32 (FAILED - 592)
F    example at ./spec/models/text_filter_spec.rb:33 (FAILED - 593)
F    example at ./spec/models/text_filter_spec.rb:34 (FAILED - 594)
F    example at ./spec/models/text_filter_spec.rb:35 (FAILED - 595)
F    example at ./spec/models/text_filter_spec.rb:36 (FAILED - 596)
  #filter_text
F    unknown (FAILED - 597)
F    smartypants (FAILED - 598)
F    markdown (FAILED - 599)
F    filterchain (FAILED - 600)
F    test_code_plus_markup_chain (FAILED - 601)
    specific typo tags
      flickr
F        should show with default settings (FAILED - 602)
F        should use default image size (FAILED - 603)
F        should use caption (FAILED - 604)
F        broken_flickr_link (FAILED - 605)
    code textfilter
      single line
F        should made nothin if no args (FAILED - 606)
F        should parse ruby lang (FAILED - 607)
F        should parse ruby and xml in same sentence but not in same place (FAILED - 608)
      multiline
F        should render ruby (FAILED - 609)
    lightbox
F      should work (FAILED - 610)
F      shoudl use default thumb image size (FAILED - 611)
F      should use default display image size (FAILED - 612)
F      should work with caption (FAILED - 613)
    combining a post-macro
      with markdown
F        correctly interprets the macro (FAILED - 614)
      with markdown
F        correctly interprets the macro (FAILED - 615)

Given a new test theme
.  layout path should be "#{::Rails.root.to_s}/themes/test/layouts/default.html.erb"

Given the default theme
F  theme should be typographic (FAILED - 616)
F  theme description should be correct (FAILED - 617)
F  theme_from_path should find the correct theme (FAILED - 618)
F  #search_theme_path finds the right things 2 (FAILED - 619)
F  find_all finds all the installed themes (FAILED - 620)

Trackback With the various trackback filters loaded and DNS mocked out appropriately
F  Incomplete trackbacks should not be accepted (FAILED - 621)
F  A valid trackback should be accepted (FAILED - 622)
F  Trackbacks with a spammy link in the excerpt should be rejected (FAILED - 623)
F  Trackbacks with a spammy source url should be rejected (FAILED - 624)
F  Trackbacks from a spammy ip address should be rejected (FAILED - 625)

With the contents fixture
.  .post_action should not fire immediately for future triggers
.  .post_action should fire immediately if the target time is <= now

User
  Factory Girl
.    should user factory valid
.    should multiple user factory valid
.    salt should not be nil
  With the contents and users fixtures loaded
.    Calling User.authenticate with a valid user/password combo returns a user
.    User.authenticate(user,invalid) returns nil
.    User.authenticate(inactive,valid) returns nil
.    User.authenticate(invalid,whatever) returns nil
F    The various article finders work appropriately (FAILED - 626)
.    authenticate? works as expected
  With a new user
.    email cannot be blank
    the password
.      can be just right
.      cannot be too short
.      cannot be too long
.      cannot be empty
.      has to match confirmation
    the login
.      can be just right
.      cannot be too short
.      cannot be too long
.      cannot be empty
  With a user in the database
.    should not be able to create another user with the same login
  Updating an existing user
    the password
.      can be just right
.      can be empty
.      cannot be too short
.      cannot be too long
.      has to match confirmation
.      is not actually changed when set to empty
    saving twice
.      should not change the password
    the login
.      must not change
  #initialize
.    accepts a settings field in its parameter hash
  #admin?
.    should return true if user is admin
.    should return false if user is not admin
  #permalink_url
F    example at ./spec/models/user_spec.rb:221 (FAILED - 627)
  #simple_editor?
.    should be true if editor == 'simple'
.    should be false if editor != 'simple'

ArticlesController
  routing
.    recognizes and generates #index
.    recognizes and generates #index with rss format
.    recognizes and generates #index with atom format
  routing for #redirect action
.    picks up any previously undefined path
.    matches paths with multiple components
.    should route URLs under /articles

XmlController
  routing
.    recognizes and generates #articlerss
.    recognizes and generates #commentrss
.    recognizes and generates #trackbackrss
.    recognizes and generates #rsd
.    recognizes and generates #feed
.    recognizes and generates #feed with a custom type
.    recognizes and generates #feed with a custom type and an id
.    recognizes and generates #feed with rss type
.    recognizes and generates #feed without format
.    recognizes and generates #feed with sitemap type

admin/content/new.html.erb
.  renders with no resources or macros
.  renders with image resources

admin/pages/new.html.erb
.  renders with no resources or macros
.  renders with image resources

articles/feedback_atom_feed.atom.builder
  with one trackback
F    should render a valid feed (FAILED - 628)
F    should render an Atom feed with one item (FAILED - 629)
    the trackback entry
F      should have all the required attributes (FAILED - 630)
  with a comment with problematic characters
F    should render a valid feed (FAILED - 631)
F    should render an Atom feed with one item (FAILED - 632)

articles/feedback_rss_feed.rss.builder
  with feedback consisting of one trackback and one comment
Not validating feed because no validator (feedvalidator in python) is installed
.    renders a valid feed
.    renders an RSS feed with two items
.    renders the trackback RSS partial once
.    renders the comment RSS partial once

articles/index_atom_feed.atom.builder
  with no items
.    renders the atom header partial
  rendering articles (with some funny characters)
Not validating feed because no validator (feedvalidator in python) is installed
.    creates a valid feed
.    creates an atom feed with two items
.    renders the article atom partial twice
  rendering a single article
.    has the correct id
    on a blog that shows extended content in feeds
.      shows the body and extended content in the feed
.      does not have a summary element in addition to the content element
    on a blog that hides extended content in feeds
.      shows only the body content in the feed
.      does not have a summary element in addition to the content element
    on a blog that has an RSS description set
.      shows the body and extended content in the feed
.      shows the RSS description in the feed
  rendering a password protected article
    on a blog that shows extended content in feeds
.      shows only a link to the article
.      does not have a summary element in addition to the content element
.      does not show any secret bits anywhere
    on a blog that hides extended content in feeds
.      shows only a link to the article
.      does not have a summary element in addition to the content element
.      does not show any secret bits anywhere

articles/index_rss_feed.rss.builder
  rendering articles (with some funny characters)
Not validating feed because no validator (feedvalidator in python) is installed
.    creates a valid feed
.    creates an RSS feed with two items
.    renders the article RSS partial twice
  rendering a single article
.    has the correct guid
.    has a link to the article's comment section
    with an author without email set
.      does not have an author entry
    with an author with email set
      on a blog that links to the author
.        has an author entry
.        has the author's email in the author entry
      on a blog that does not link
.        does not have an author entry
    on a blog that shows extended content in feeds
.      shows the body and extended content in the feed
    on a blog that hides extended content in feeds
.      shows only the body content in the feed
    on a blog that has an RSS description set
.      shows the body and extended content in the feed
.      shows the RSS description in the feed
  rendering a password protected article
    on a blog that shows extended content in feeds
.      shows only a link to the article
.      does not show any secret bits anywhere
    on a blog that hides extended content in feeds
.      shows only a link to the article
.      does not show any secret bits anywhere
  rendering an article with a UTF-8 permalink
Not validating feed because no validator (feedvalidator in python) is installed
.    creates a valid feed

articles/index.html.erb
  without a theme
    normally
F      should not have too many paragraph marks around body (FAILED - 633)
F      should not have div nested inside p (FAILED - 634)
F      should not have extra escaped html (FAILED - 635)
F      renders the regular article partial twice (FAILED - 636)
F      does not render any password forms (FAILED - 637)
    without search, on page 2
F      should not have pagination link to page 2 (FAILED - 638)
F      should have pagination link to page 1 (FAILED - 639)
    when on page 2 of search
F      should not have pagination link to search page 2 (FAILED - 640)
F      should have pagination link to search page 1 (FAILED - 641)
  with theme standard_issue
    normally
F      should not have too many paragraph marks around body (FAILED - 642)
F      should not have div nested inside p (FAILED - 643)
F      should not have extra escaped html (FAILED - 644)
F      renders the regular article partial twice (FAILED - 645)
F      does not render any password forms (FAILED - 646)
    without search, on page 2
F      should not have pagination link to page 2 (FAILED - 647)
F      should have pagination link to page 1 (FAILED - 648)
    when on page 2 of search
F      should not have pagination link to search page 2 (FAILED - 649)
F      should have pagination link to search page 1 (FAILED - 650)
  with theme true-blue-3
    normally
F      should not have too many paragraph marks around body (FAILED - 651)
F      should not have div nested inside p (FAILED - 652)
F      should not have extra escaped html (FAILED - 653)
F      renders the regular article partial twice (FAILED - 654)
F      does not render any password forms (FAILED - 655)
    without search, on page 2
F      should not have pagination link to page 2 (FAILED - 656)
F      should have pagination link to page 1 (FAILED - 657)
    when on page 2 of search
F      should not have pagination link to search page 2 (FAILED - 658)
F      should have pagination link to search page 1 (FAILED - 659)
  with theme typographic
    normally
F      should not have too many paragraph marks around body (FAILED - 660)
F      should not have div nested inside p (FAILED - 661)
F      should not have extra escaped html (FAILED - 662)
F      renders the regular article partial twice (FAILED - 663)
F      does not render any password forms (FAILED - 664)
    without search, on page 2
F      should not have pagination link to page 2 (FAILED - 665)
F      should have pagination link to page 1 (FAILED - 666)
    when on page 2 of search
F      should not have pagination link to search page 2 (FAILED - 667)
F      should have pagination link to search page 1 (FAILED - 668)
  with theme true-red
    normally
F      should not have too many paragraph marks around body (FAILED - 669)
F      should not have div nested inside p (FAILED - 670)
F      should not have extra escaped html (FAILED - 671)
F      renders the regular article partial twice (FAILED - 672)
F      does not render any password forms (FAILED - 673)
    without search, on page 2
F      should not have pagination link to page 2 (FAILED - 674)
F      should have pagination link to page 1 (FAILED - 675)
    when on page 2 of search
F      should not have pagination link to search page 2 (FAILED - 676)
F      should have pagination link to search page 1 (FAILED - 677)
  with theme bootstrap
    normally
F      should not have too many paragraph marks around body (FAILED - 678)
F      should not have div nested inside p (FAILED - 679)
F      should not have extra escaped html (FAILED - 680)
F      renders the regular article partial twice (FAILED - 681)
F      does not render any password forms (FAILED - 682)
    without search, on page 2
F      should not have pagination link to page 2 (FAILED - 683)
F      should have pagination link to page 1 (FAILED - 684)
    when on page 2 of search
F      should not have pagination link to search page 2 (FAILED - 685)
F      should have pagination link to search page 1 (FAILED - 686)
  with theme dirtylicious
    normally
F      should not have too many paragraph marks around body (FAILED - 687)
F      should not have div nested inside p (FAILED - 688)
F      should not have extra escaped html (FAILED - 689)
F      renders the regular article partial twice (FAILED - 690)
F      does not render any password forms (FAILED - 691)
    without search, on page 2
F      should not have pagination link to page 2 (FAILED - 692)
F      should have pagination link to page 1 (FAILED - 693)
    when on page 2 of search
F      should not have pagination link to search page 2 (FAILED - 694)
F      should have pagination link to search page 1 (FAILED - 695)
  with theme scribbish
    normally
F      should not have too many paragraph marks around body (FAILED - 696)
F      should not have div nested inside p (FAILED - 697)
F      should not have extra escaped html (FAILED - 698)
F      renders the regular article partial twice (FAILED - 699)
F      does not render any password forms (FAILED - 700)
    without search, on page 2
F      should not have pagination link to page 2 (FAILED - 701)
F      should have pagination link to page 1 (FAILED - 702)
    when on page 2 of search
F      should not have pagination link to search page 2 (FAILED - 703)
F      should have pagination link to search page 1 (FAILED - 704)

articles/read.html.erb
  without a theme
.    should not have too many paragraph marks around body
.    should not have too many paragraph marks around extended contents
.    should not have too many paragraph marks around comment contents
.    should automatically add links
.    should show the comment creation times in the comment list
  with theme standard_issue
.    should not have too many paragraph marks around body
.    should not have too many paragraph marks around extended contents
.    should not have too many paragraph marks around comment contents
.    should automatically add links
.    should show the comment creation times in the comment list
  with theme true-blue-3
.    should not have too many paragraph marks around body
.    should not have too many paragraph marks around extended contents
.    should not have too many paragraph marks around comment contents
.    should automatically add links
.    should show the comment creation times in the comment list
  with theme typographic
.    should not have too many paragraph marks around body
.    should not have too many paragraph marks around extended contents
.    should not have too many paragraph marks around comment contents
.    should automatically add links
.    should show the comment creation times in the comment list
  with theme true-red
.    should not have too many paragraph marks around body
.    should not have too many paragraph marks around extended contents
.    should not have too many paragraph marks around comment contents
.    should automatically add links
.    should show the comment creation times in the comment list
  with theme bootstrap
.    should not have too many paragraph marks around body
.    should not have too many paragraph marks around extended contents
.    should not have too many paragraph marks around comment contents
.    should automatically add links
.    should show the comment creation times in the comment list
  with theme dirtylicious
.    should not have too many paragraph marks around body
.    should not have too many paragraph marks around extended contents
.    should not have too many paragraph marks around comment contents
.    should automatically add links
.    should show the comment creation times in the comment list
  with theme scribbish
.    should not have too many paragraph marks around body
.    should not have too many paragraph marks around extended contents
.    should not have too many paragraph marks around comment contents
.    should automatically add links
.    should show the comment creation times in the comment list

authors/show_atom_feed.atom.builder
  with no items
.    renders the atom header partial
  rendering articles (with some funny characters)
Not validating feed because no validator (feedvalidator in python) is installed
.    creates a valid feed
.    creates an atom feed with two items
.    renders the article atom partial twice

authors/show_rss_feed.rss.builder
  rendering articles (with some funny characters)
Not validating feed because no validator (feedvalidator in python) is installed
.    creates a valid feed
.    creates an RSS feed with two items
.    renders the article RSS partial twice

First dodgy comment
  it should behave like CommentSanitization
F    Should sanitize content rendered with the  textfilter (FAILED - 705)
F    Should sanitize content rendered with the markdown textfilter (FAILED - 706)
F    Should sanitize content rendered with the textile textfilter (FAILED - 707)
F    Should sanitize content rendered with the smartypants textfilter (FAILED - 708)
F    Should sanitize content rendered with the markdown smartypants textfilter (FAILED - 709)

Second dodgy comment
  it should behave like CommentSanitization
F    Should sanitize content rendered with the  textfilter (FAILED - 710)
F    Should sanitize content rendered with the markdown textfilter (FAILED - 711)
F    Should sanitize content rendered with the textile textfilter (FAILED - 712)
F    Should sanitize content rendered with the smartypants textfilter (FAILED - 713)
F    Should sanitize content rendered with the markdown smartypants textfilter (FAILED - 714)

Dodgy comment #3
  it should behave like CommentSanitization
F    Should sanitize content rendered with the  textfilter (FAILED - 715)
F    Should sanitize content rendered with the markdown textfilter (FAILED - 716)
F    Should sanitize content rendered with the textile textfilter (FAILED - 717)
F    Should sanitize content rendered with the smartypants textfilter (FAILED - 718)
F    Should sanitize content rendered with the markdown smartypants textfilter (FAILED - 719)

Extra Dodgy comment
  it should behave like CommentSanitization
F    Should sanitize content rendered with the  textfilter (FAILED - 720)
F    Should sanitize content rendered with the markdown textfilter (FAILED - 721)
F    Should sanitize content rendered with the textile textfilter (FAILED - 722)
F    Should sanitize content rendered with the smartypants textfilter (FAILED - 723)
F    Should sanitize content rendered with the markdown smartypants textfilter (FAILED - 724)

XSS1
  it should behave like CommentSanitization
F    Should sanitize content rendered with the  textfilter (FAILED - 725)
F    Should sanitize content rendered with the markdown textfilter (FAILED - 726)
F    Should sanitize content rendered with the textile textfilter (FAILED - 727)
F    Should sanitize content rendered with the smartypants textfilter (FAILED - 728)
F    Should sanitize content rendered with the markdown smartypants textfilter (FAILED - 729)

XSS2
  it should behave like CommentSanitization
F    Should sanitize content rendered with the  textfilter (FAILED - 730)
F    Should sanitize content rendered with the markdown textfilter (FAILED - 731)
F    Should sanitize content rendered with the textile textfilter (FAILED - 732)
F    Should sanitize content rendered with the smartypants textfilter (FAILED - 733)
F    Should sanitize content rendered with the markdown smartypants textfilter (FAILED - 734)

XSS2
  it should behave like CommentSanitization
F    Should sanitize content rendered with the  textfilter (FAILED - 735)
F    Should sanitize content rendered with the markdown textfilter (FAILED - 736)
F    Should sanitize content rendered with the textile textfilter (FAILED - 737)
F    Should sanitize content rendered with the smartypants textfilter (FAILED - 738)
F    Should sanitize content rendered with the markdown smartypants textfilter (FAILED - 739)

Comment with bare http URL
  it should behave like CommentSanitization
F    Should sanitize content rendered with the  textfilter (FAILED - 740)
F    Should sanitize content rendered with the markdown textfilter (FAILED - 741)
F    Should sanitize content rendered with the textile textfilter (FAILED - 742)
F    Should sanitize content rendered with the smartypants textfilter (FAILED - 743)
F    Should sanitize content rendered with the markdown smartypants textfilter (FAILED - 744)

Comment with bare email address
  it should behave like CommentSanitization
F    Should sanitize content rendered with the  textfilter (FAILED - 745)
F    Should sanitize content rendered with the markdown textfilter (FAILED - 746)
F    Should sanitize content rendered with the textile textfilter (FAILED - 747)
F    Should sanitize content rendered with the smartypants textfilter (FAILED - 748)
F    Should sanitize content rendered with the markdown smartypants textfilter (FAILED - 749)

First dodgy comment with dofollow
  it should behave like CommentSanitizationWithDofollow
F    Should sanitize content rendered with the  textfilter (FAILED - 750)
F    Should sanitize content rendered with the markdown textfilter (FAILED - 751)
F    Should sanitize content rendered with the textile textfilter (FAILED - 752)
F    Should sanitize content rendered with the smartypants textfilter (FAILED - 753)
F    Should sanitize content rendered with the markdown smartypants textfilter (FAILED - 754)

Second dodgy comment with dofollow
  it should behave like CommentSanitizationWithDofollow
F    Should sanitize content rendered with the  textfilter (FAILED - 755)
F    Should sanitize content rendered with the markdown textfilter (FAILED - 756)
F    Should sanitize content rendered with the textile textfilter (FAILED - 757)
F    Should sanitize content rendered with the smartypants textfilter (FAILED - 758)
F    Should sanitize content rendered with the markdown smartypants textfilter (FAILED - 759)

Dodgy comment #3 with dofollow
  it should behave like CommentSanitizationWithDofollow
F    Should sanitize content rendered with the  textfilter (FAILED - 760)
F    Should sanitize content rendered with the markdown textfilter (FAILED - 761)
F    Should sanitize content rendered with the textile textfilter (FAILED - 762)
F    Should sanitize content rendered with the smartypants textfilter (FAILED - 763)
F    Should sanitize content rendered with the markdown smartypants textfilter (FAILED - 764)

Extra Dodgy comment with dofollow
  it should behave like CommentSanitizationWithDofollow
F    Should sanitize content rendered with the  textfilter (FAILED - 765)
F    Should sanitize content rendered with the markdown textfilter (FAILED - 766)
F    Should sanitize content rendered with the textile textfilter (FAILED - 767)
F    Should sanitize content rendered with the smartypants textfilter (FAILED - 768)
F    Should sanitize content rendered with the markdown smartypants textfilter (FAILED - 769)

XSS1 with dofollow
  it should behave like CommentSanitizationWithDofollow
F    Should sanitize content rendered with the  textfilter (FAILED - 770)
F    Should sanitize content rendered with the markdown textfilter (FAILED - 771)
F    Should sanitize content rendered with the textile textfilter (FAILED - 772)
F    Should sanitize content rendered with the smartypants textfilter (FAILED - 773)
F    Should sanitize content rendered with the markdown smartypants textfilter (FAILED - 774)

XSS2 with dofollow
  it should behave like CommentSanitizationWithDofollow
F    Should sanitize content rendered with the  textfilter (FAILED - 775)
F    Should sanitize content rendered with the markdown textfilter (FAILED - 776)
F    Should sanitize content rendered with the textile textfilter (FAILED - 777)
F    Should sanitize content rendered with the smartypants textfilter (FAILED - 778)
F    Should sanitize content rendered with the markdown smartypants textfilter (FAILED - 779)

XSS2 with dofollow
  it should behave like CommentSanitizationWithDofollow
F    Should sanitize content rendered with the  textfilter (FAILED - 780)
F    Should sanitize content rendered with the markdown textfilter (FAILED - 781)
F    Should sanitize content rendered with the textile textfilter (FAILED - 782)
F    Should sanitize content rendered with the smartypants textfilter (FAILED - 783)
F    Should sanitize content rendered with the markdown smartypants textfilter (FAILED - 784)

Comment with bare http URL with dofollow
  it should behave like CommentSanitizationWithDofollow
F    Should sanitize content rendered with the  textfilter (FAILED - 785)
F    Should sanitize content rendered with the markdown textfilter (FAILED - 786)
F    Should sanitize content rendered with the textile textfilter (FAILED - 787)
F    Should sanitize content rendered with the smartypants textfilter (FAILED - 788)
F    Should sanitize content rendered with the markdown smartypants textfilter (FAILED - 789)

Comment with bare email address with dofollow
  it should behave like CommentSanitizationWithDofollow
F    Should sanitize content rendered with the  textfilter (FAILED - 790)
F    Should sanitize content rendered with the markdown textfilter (FAILED - 791)
F    Should sanitize content rendered with the textile textfilter (FAILED - 792)
F    Should sanitize content rendered with the smartypants textfilter (FAILED - 793)
F    Should sanitize content rendered with the markdown smartypants textfilter (FAILED - 794)

comments/index_atom_feed.atom.builder
  rendering comments with one comment
Not validating feed because no validator (feedvalidator in python) is installed
.    should render a valid feed
.    shows typo with the current version as the generator
.    should render an Atom feed with one item
    the comment entry
.      should have all the required attributes

comments/index_rss_feed.rss.builder
  rendering comments
Not validating feed because no validator (feedvalidator in python) is installed
.    should render a valid rss feed
    the comment entry
.      should have all the required attributes

layouts/default.html.erb
  with theme standard_issue
    when use_meta_keyword set to true
F      renders assigned keywords (FAILED - 795)
    when use_meta_keyword set to false
F      does not render assigned keywords (FAILED - 796)
  with theme true-blue-3
    when use_meta_keyword set to true
F      renders assigned keywords (FAILED - 797)
    when use_meta_keyword set to false
F      does not render assigned keywords (FAILED - 798)
  with theme typographic
    when use_meta_keyword set to true
F      renders assigned keywords (FAILED - 799)
    when use_meta_keyword set to false
F      does not render assigned keywords (FAILED - 800)
  with theme true-red
    when use_meta_keyword set to true
F      renders assigned keywords (FAILED - 801)
    when use_meta_keyword set to false
F      does not render assigned keywords (FAILED - 802)
  with theme bootstrap
    when use_meta_keyword set to true
F      renders assigned keywords (FAILED - 803)
    when use_meta_keyword set to false
F      does not render assigned keywords (FAILED - 804)
  with theme dirtylicious
    when use_meta_keyword set to true
F      renders assigned keywords (FAILED - 805)
    when use_meta_keyword set to false
F      does not render assigned keywords (FAILED - 806)
  with theme scribbish
    when use_meta_keyword set to true
F      renders assigned keywords (FAILED - 807)
    when use_meta_keyword set to false
F      does not render assigned keywords (FAILED - 808)

shared/_atom_header.atom.builder
  with no items
.    shows typo with the current version as the generator

trackbacks/index_atom_feed.atom.builder
  rendering trackbacks with one trackback
Not validating feed because no validator (feedvalidator in python) is installed
.    should render a valid feed
.    shows typo with the current version as the generator
.    should render an Atom feed with one item
    the trackback entry
.      should have all the required attributes

trackbacks/index_rss_feed.rss.builder
  rendering trackbacks
Not validating feed because no validator (feedvalidator in python) is installed
.    should render a valid rss feed
    the trackback entry
.      should have all the required attributes


Pending:
  ThemeController disabled_test_javascript
    # Not yet implemented
    # ./spec/controllers/theme_controller_spec.rb:35
  Article test_triggers_are_dependent
    # Needs a fix for Rails ticket #5105: has_many: Dependent deleting does not work with STI
    # ./spec/models/article_spec.rb:286
  Article with tags lets the tag collection survive a load-save cycle
    # Not yet implemented
    # ./spec/models/article_spec.rb:241

Pending:
  ThemeController disabled_test_javascript
    # Not yet implemented
    # ./spec/controllers/theme_controller_spec.rb:35
  Article test_triggers_are_dependent
    # Needs a fix for Rails ticket #5105: has_many: Dependent deleting does not work with STI
    # ./spec/models/article_spec.rb:286
  Article with tags lets the tag collection survive a load-save cycle
    # Not yet implemented
    # ./spec/models/article_spec.rb:241

Failures:

  1) AccountsController A successful login with 'Remember me' checked should not cause password to change
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:6:in `block (3 levels) in <top (required)>'

  2) AccountsController A successfully authenticated login session gets a user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:16:in `block (3 levels) in <top (required)>'

  3) AccountsController A successfully authenticated login sets typo_user_profile cookie
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:16:in `block (3 levels) in <top (required)>'

  4) AccountsController A successfully authenticated login redirects to /bogus/location
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:16:in `block (3 levels) in <top (required)>'

  5) AccountsController A successfully authenticated login redirects to /admin if no return
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:16:in `block (3 levels) in <top (required)>'

  6) AccountsController A successfully authenticated login redirects to /admin if no return and you are logged in
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:16:in `block (3 levels) in <top (required)>'

  7) AccountsController A successfully authenticated login should redirect to signup if no users
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:16:in `block (3 levels) in <top (required)>'

  8) AccountsController User is inactive no user id goes in the session
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:61:in `block (3 levels) in <top (required)>'

  9) AccountsController User is inactive login should == "inactive"
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:61:in `block (3 levels) in <top (required)>'

  10) AccountsController User is inactive typo_user_profile cookie should be blank
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:61:in `block (3 levels) in <top (required)>'

  11) AccountsController User is inactive should render login action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:61:in `block (3 levels) in <top (required)>'

  12) AccountsController Login with nil user and password should render login action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:94:in `block (3 levels) in <top (required)>'

  13) AccountsController Login gets the wrong password no user in goes in the session
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:110:in `block (3 levels) in <top (required)>'

  14) AccountsController Login gets the wrong password login should == "bob"
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:110:in `block (3 levels) in <top (required)>'

  15) AccountsController Login gets the wrong password typo_user_profile cookie should be blank
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:110:in `block (3 levels) in <top (required)>'

  16) AccountsController Login gets the wrong password should render login action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:110:in `block (3 levels) in <top (required)>'

  17) AccountsController GET /index should redirect to login
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:142:in `block (3 levels) in <top (required)>'

  18) AccountsController GET /index should redirect to signup
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:149:in `block (3 levels) in <top (required)>'

  19) AccountsController GET /login should render action :login
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:158:in `block (3 levels) in <top (required)>'

  20) AccountsController GET /login with 0 existing users should render action :signup
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:168:in `block (3 levels) in <top (required)>'

  21) AccountsController GET /login with 0 existing users should render :signup
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:168:in `block (3 levels) in <top (required)>'

  22) AccountsController with >0 existing user and allow_signup = 0 GET signup should redirect to login
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:186:in `block (3 levels) in <top (required)>'

  23) AccountsController with >0 existing user and allow_signup = 0 POST signup without allow_signup should redirect to login
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:186:in `block (3 levels) in <top (required)>'

  24) AccountsController with > 0 existing user and allow_signup = 1 GET signup with allow_signup should redirect to login
     Failure/Error: @blog = Factory(:blog, :allow_signup => 1)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:207:in `block (3 levels) in <top (required)>'

  25) AccountsController with > 0 existing user and allow_signup = 1 POST signup with allow_signup should redirect to login
     Failure/Error: @blog = Factory(:blog, :allow_signup => 1)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:207:in `block (3 levels) in <top (required)>'

  26) AccountsController GET signup with 0 existing users sets @user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:228:in `block (3 levels) in <top (required)>'

  27) AccountsController GET signup with 0 existing users renders action signup
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:228:in `block (3 levels) in <top (required)>'

  28) AccountsController POST signup with 0 existing users creates and saves a user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:289:in `block (3 levels) in <top (required)>'

  29) AccountsController POST signup with 0 existing users redirects to /account/confirm
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:289:in `block (3 levels) in <top (required)>'

  30) AccountsController POST signup with 0 existing users session gets a user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:289:in `block (3 levels) in <top (required)>'

  31) AccountsController User is logged in trying to log in once again redirects to admin/dashboard/index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:326:in `block (3 levels) in <top (required)>'

  32) AccountsController User is logged in when logging out deletes the session[:user_id]
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:326:in `block (3 levels) in <top (required)>'

  33) AccountsController User is logged in when logging out deletes the session[:user]
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:326:in `block (3 levels) in <top (required)>'

  34) AccountsController User is logged in when logging out redirects to the login action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:326:in `block (3 levels) in <top (required)>'

  35) AccountsController User is logged in when logging out deletes cookies containing credentials
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:326:in `block (3 levels) in <top (required)>'

  36) AccountsController when user has lost their password when GET 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:369:in `block (3 levels) in <top (required)>'

  37) AccountsController when user has lost their password when a known login or email is POSTed 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:369:in `block (3 levels) in <top (required)>'

  38) AccountsController when user has lost their password when an unknown login or email is POSTed 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:369:in `block (3 levels) in <top (required)>'

  39) AccountsController when user has lost their password when an unknown login or email is POSTed should display an error
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:369:in `block (3 levels) in <top (required)>'

  40) Admin::CacheController test_index should render template index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/cache_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  41) Admin::CategoriesController test_index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/categories_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  42) Admin::CategoriesController should create a new category
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/categories_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  43) Admin::CategoriesController test_update
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/categories_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  44) Admin::CategoriesController test_destroy with POST
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/categories_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  45) Admin::CategoriesController should edit an existing category
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/categories_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  46) Admin::CategoriesController test_edit should render template new
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/categories_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  47) Admin::CategoriesController test_edit should have valid category
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/categories_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  48) Admin::CategoriesController test_destroy with GET should render destroy template
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/categories_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  49) Admin::ContentController insert_editor action should render _simple_editor
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:186:in `block (3 levels) in <top (required)>'

  50) Admin::ContentController insert_editor action should render _visual_editor
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:186:in `block (3 levels) in <top (required)>'

  51) Admin::ContentController insert_editor action should render _visual_editor even if editor param is set to unknow editor
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:186:in `block (3 levels) in <top (required)>'

  52) Admin::ContentController with admin connection it should behave like index action should render template index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  53) Admin::ContentController with admin connection it should behave like index action should see all published in index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  54) Admin::ContentController with admin connection it should behave like index action should restrict only by searchstring
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  55) Admin::ContentController with admin connection it should behave like index action should restrict by searchstring and published_at
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  56) Admin::ContentController with admin connection it should behave like index action should restrict to drafts
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  57) Admin::ContentController with admin connection it should behave like index action should restrict to publication pending articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  58) Admin::ContentController with admin connection it should behave like index action should restrict to withdrawn articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  59) Admin::ContentController with admin connection it should behave like index action should restrict to withdrawn articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  60) Admin::ContentController with admin connection it should behave like index action should restrict to published articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  61) Admin::ContentController with admin connection it should behave like index action should fallback to default behavior
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  62) Admin::ContentController with admin connection it should behave like new action should create article with no comments
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  63) Admin::ContentController with admin connection it should behave like new action should create a published article with a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  64) Admin::ContentController with admin connection it should behave like new action should create a draft article without a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  65) Admin::ContentController with admin connection it should behave like new action should create an unpublished article without a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  66) Admin::ContentController with admin connection it should behave like new action should create an article published in the future without a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  67) Admin::ContentController with admin connection it should behave like new action should create article with no pings
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  68) Admin::ContentController with admin connection it should behave like new action should create an article linked to the current user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  69) Admin::ContentController with admin connection it should behave like new action should create new published article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  70) Admin::ContentController with admin connection it should behave like new action should redirect to show
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  71) Admin::ContentController with admin connection it should behave like new action should send notifications on create
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  72) Admin::ContentController with admin connection it should behave like new action should create an article in a category
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  73) Admin::ContentController with admin connection it should behave like new action should create an article with tags
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  74) Admin::ContentController with admin connection it should behave like new action should create article in future
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  75) Admin::ContentController with admin connection it should behave like new action should correctly interpret time zone in :published_at
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  76) Admin::ContentController with admin connection it should behave like new action should respect "GMT+0000 (UTC)" in :published_at
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  77) Admin::ContentController with admin connection it should behave like new action should create a filtered article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  78) Admin::ContentController with admin connection it should behave like new action GET renders the 'new' template
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  79) Admin::ContentController with admin connection it should behave like new action GET correctly converts multi-word tags
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  80) Admin::ContentController with admin connection it should behave like new action publishing a published article with an autosaved draft updates the original
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  81) Admin::ContentController with admin connection it should behave like new action publishing a published article with an autosaved draft deletes the draft
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  82) Admin::ContentController with admin connection it should behave like new action publishing a draft copy of a published article updates the original
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  83) Admin::ContentController with admin connection it should behave like new action publishing a draft copy of a published article deletes the draft
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  84) Admin::ContentController with admin connection it should behave like new action saving a published article as draft leaves the original published
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  85) Admin::ContentController with admin connection it should behave like new action saving a published article as draft leaves the original as is
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  86) Admin::ContentController with admin connection it should behave like new action saving a published article as draft redirects to the index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  87) Admin::ContentController with admin connection it should behave like new action saving a published article as draft creates a draft
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  88) Admin::ContentController with admin connection it should behave like new action with an unrelated draft in the database saving new article as draft leaves the original draft in existence
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  89) Admin::ContentController with admin connection it should behave like destroy action should_not destroy article by get
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy action" called from ./spec/controllers/admin/content_controller_spec.rb:481
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  90) Admin::ContentController with admin connection it should behave like destroy action should destroy article by post
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy action" called from ./spec/controllers/admin/content_controller_spec.rb:481
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  91) Admin::ContentController with admin connection it should behave like autosave action first time for a new article should save new article with draft status and no parent article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "autosave action" called from ./spec/controllers/admin/content_controller_spec.rb:482
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  92) Admin::ContentController with admin connection it should behave like autosave action second time for a new article should save the same article with draft status and no parent article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "autosave action" called from ./spec/controllers/admin/content_controller_spec.rb:482
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  93) Admin::ContentController with admin connection it should behave like autosave action for a published article should create a draft article with proper attributes and existing article as a parent
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "autosave action" called from ./spec/controllers/admin/content_controller_spec.rb:482
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  94) Admin::ContentController with admin connection it should behave like autosave action for a published article should not create another draft article with parent_id if article has already a draft associated
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "autosave action" called from ./spec/controllers/admin/content_controller_spec.rb:482
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  95) Admin::ContentController with admin connection it should behave like autosave action for a published article should create a draft with the same permalink even if the title has changed
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "autosave action" called from ./spec/controllers/admin/content_controller_spec.rb:482
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  96) Admin::ContentController with admin connection it should behave like autosave action with an unrelated draft in the database leaves the original draft in existence
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "autosave action" called from ./spec/controllers/admin/content_controller_spec.rb:482
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  97) Admin::ContentController with admin connection edit action should edit article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  98) Admin::ContentController with admin connection edit action should update article by edit action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  99) Admin::ContentController with admin connection edit action should allow updating body_and_extended
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  100) Admin::ContentController with admin connection edit action should delete draft about this article if update
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  101) Admin::ContentController with admin connection edit action should delete all draft about this article if update not happen but why not
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  102) Admin::ContentController with admin connection resource_add action should add resource
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  103) Admin::ContentController with admin connection resource_remove action should remove resource
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  104) Admin::ContentController with admin connection auto_complete_for_article_keywords action should return foo for keywords fo
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  105) Admin::ContentController with admin connection auto_complete_for_article_keywords action should return nothing for hello
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  106) Admin::ContentController with admin connection auto_complete_for_article_keywords action should return bar and bazz for ba keyword
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  107) Admin::ContentController with publisher connection it should behave like index action should render template index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  108) Admin::ContentController with publisher connection it should behave like index action should see all published in index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  109) Admin::ContentController with publisher connection it should behave like index action should restrict only by searchstring
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  110) Admin::ContentController with publisher connection it should behave like index action should restrict by searchstring and published_at
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  111) Admin::ContentController with publisher connection it should behave like index action should restrict to drafts
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  112) Admin::ContentController with publisher connection it should behave like index action should restrict to publication pending articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  113) Admin::ContentController with publisher connection it should behave like index action should restrict to withdrawn articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  114) Admin::ContentController with publisher connection it should behave like index action should restrict to withdrawn articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  115) Admin::ContentController with publisher connection it should behave like index action should restrict to published articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  116) Admin::ContentController with publisher connection it should behave like index action should fallback to default behavior
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  117) Admin::ContentController with publisher connection it should behave like new action should create article with no comments
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  118) Admin::ContentController with publisher connection it should behave like new action should create a published article with a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  119) Admin::ContentController with publisher connection it should behave like new action should create a draft article without a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  120) Admin::ContentController with publisher connection it should behave like new action should create an unpublished article without a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  121) Admin::ContentController with publisher connection it should behave like new action should create an article published in the future without a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  122) Admin::ContentController with publisher connection it should behave like new action should create article with no pings
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  123) Admin::ContentController with publisher connection it should behave like new action should create an article linked to the current user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  124) Admin::ContentController with publisher connection it should behave like new action should create new published article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  125) Admin::ContentController with publisher connection it should behave like new action should redirect to show
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  126) Admin::ContentController with publisher connection it should behave like new action should send notifications on create
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  127) Admin::ContentController with publisher connection it should behave like new action should create an article in a category
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  128) Admin::ContentController with publisher connection it should behave like new action should create an article with tags
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  129) Admin::ContentController with publisher connection it should behave like new action should create article in future
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  130) Admin::ContentController with publisher connection it should behave like new action should correctly interpret time zone in :published_at
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  131) Admin::ContentController with publisher connection it should behave like new action should respect "GMT+0000 (UTC)" in :published_at
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  132) Admin::ContentController with publisher connection it should behave like new action should create a filtered article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  133) Admin::ContentController with publisher connection it should behave like new action GET renders the 'new' template
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  134) Admin::ContentController with publisher connection it should behave like new action GET correctly converts multi-word tags
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  135) Admin::ContentController with publisher connection it should behave like new action publishing a published article with an autosaved draft updates the original
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  136) Admin::ContentController with publisher connection it should behave like new action publishing a published article with an autosaved draft deletes the draft
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  137) Admin::ContentController with publisher connection it should behave like new action publishing a draft copy of a published article updates the original
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  138) Admin::ContentController with publisher connection it should behave like new action publishing a draft copy of a published article deletes the draft
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  139) Admin::ContentController with publisher connection it should behave like new action saving a published article as draft leaves the original published
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  140) Admin::ContentController with publisher connection it should behave like new action saving a published article as draft leaves the original as is
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  141) Admin::ContentController with publisher connection it should behave like new action saving a published article as draft redirects to the index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  142) Admin::ContentController with publisher connection it should behave like new action saving a published article as draft creates a draft
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  143) Admin::ContentController with publisher connection it should behave like new action with an unrelated draft in the database saving new article as draft leaves the original draft in existence
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  144) Admin::ContentController with publisher connection it should behave like destroy action should_not destroy article by get
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy action" called from ./spec/controllers/admin/content_controller_spec.rb:623
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  145) Admin::ContentController with publisher connection it should behave like destroy action should destroy article by post
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy action" called from ./spec/controllers/admin/content_controller_spec.rb:623
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  146) Admin::ContentController with publisher connection edit action should redirect if edit article doesn't his
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  147) Admin::ContentController with publisher connection edit action should edit article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  148) Admin::ContentController with publisher connection edit action should update article by edit action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  149) Admin::ContentController with publisher connection destroy action can be access should redirect when want destroy article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  150) Admin::DashboardController test index should render the index template
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/dashboard_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  151) Admin::FeedbackController logged in admin user destroy action should destroy feedback from article doesn't own
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  152) Admin::FeedbackController logged in admin user destroy action it should behave like destroy feedback with feedback from own article should destroy feedback
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy feedback with feedback from own article" called from ./spec/controllers/admin/feedback_controller_spec.rb:56
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  153) Admin::FeedbackController logged in admin user destroy action it should behave like destroy feedback with feedback from own article should redirect to feedback from article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy feedback with feedback from own article" called from ./spec/controllers/admin/feedback_controller_spec.rb:56
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  154) Admin::FeedbackController logged in admin user destroy action it should behave like destroy feedback with feedback from own article should not destroy feedback in get request
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy feedback with feedback from own article" called from ./spec/controllers/admin/feedback_controller_spec.rb:56
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  155) Admin::FeedbackController logged in admin user index action should success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  156) Admin::FeedbackController logged in admin user index action should view only unconfirmed feedback
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  157) Admin::FeedbackController logged in admin user index action should view only spam feedback
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  158) Admin::FeedbackController logged in admin user index action should view unconfirmed_spam
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  159) Admin::FeedbackController logged in admin user index action should view presumed_spam
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  160) Admin::FeedbackController logged in admin user index action should view presumed_ham
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  161) Admin::FeedbackController logged in admin user index action should get page 1 if page params empty
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  162) Admin::FeedbackController logged in admin user article action should see all feedback on one article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  163) Admin::FeedbackController logged in admin user article action should see only spam feedback on one article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  164) Admin::FeedbackController logged in admin user article action should see only ham feedback on one article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  165) Admin::FeedbackController logged in admin user article action should redirect_to index if bad article id
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  166) Admin::FeedbackController logged in admin user create action by get access should raise ActiveRecordNotFound if article doesn't exist
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  167) Admin::FeedbackController logged in admin user create action by get access should not create comment
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  168) Admin::FeedbackController logged in admin user create action by post access should raise ActiveRecordNotFound if article doesn't exist
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  169) Admin::FeedbackController logged in admin user create action by post access should create comment
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  170) Admin::FeedbackController logged in admin user create action by post access should create comment mark as ham
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  171) Admin::FeedbackController logged in admin user edit action should render edit form
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  172) Admin::FeedbackController logged in admin user update action should update comment if post request
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  173) Admin::FeedbackController logged in admin user update action should not  update comment if get request
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  174) Admin::FeedbackController publisher access destroy action should not destroy feedback doesn't own
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  175) Admin::FeedbackController publisher access destroy action it should behave like destroy feedback with feedback from own article should destroy feedback
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy feedback with feedback from own article" called from ./spec/controllers/admin/feedback_controller_spec.rb:296
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  176) Admin::FeedbackController publisher access destroy action it should behave like destroy feedback with feedback from own article should redirect to feedback from article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy feedback with feedback from own article" called from ./spec/controllers/admin/feedback_controller_spec.rb:296
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  177) Admin::FeedbackController publisher access destroy action it should behave like destroy feedback with feedback from own article should not destroy feedback in get request
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy feedback with feedback from own article" called from ./spec/controllers/admin/feedback_controller_spec.rb:296
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  178) Admin::FeedbackController publisher access edit action should not edit comment no own article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  179) Admin::FeedbackController publisher access edit action should edit comment if own article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  180) Admin::FeedbackController publisher access update action should update comment if own article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  181) Admin::FeedbackController publisher access update action should not update comment if not own article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  182) Admin::FeedbackController publisher access #bulkops action should redirect to action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  183) Admin::PagesController test_create
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  184) Admin::PagesController test_update
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  185) Admin::PagesController test_destroy
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  186) Admin::PagesController should create a published page with a redirect
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  187) Admin::PagesController should create an unpublished page without a redirect
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  188) Admin::PagesController should create a page published in the future without a redirect
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  189) Admin::PagesController#index should response success
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  190) Admin::PagesController#index should response success with :page args
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  191) Admin::PagesController new without page params should render template new and has a page object
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  192) Admin::PagesController new without page params should assign to current user
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  193) Admin::PagesController new without page params should have a text filter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  194) Admin::PagesController test_edit should render edit template
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  195) Admin::PagesController insert_editor action should render _simple_editor
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  196) Admin::PagesController insert_editor action should render _visual_editor
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  197) Admin::PagesController insert_editor action should render _visual_editor even if editor param is set to unknow editor
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  198) Admin::PostTypesController index shoudld redirect to new
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/post_types_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  199) Admin::PostTypesController test_create
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/post_types_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  200) Admin::PostTypesController test_destroy with POST
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/post_types_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  201) Admin::PostTypesController test_new should render template new
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/post_types_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  202) Admin::PostTypesController test_edit should render template new
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/post_types_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  203) Admin::PostTypesController test_edit test_update
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/post_types_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  204) Admin::PostTypesController test_destroy with GET should render destroy template
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/post_types_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  205) Admin::ProfilesController#index should render index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/profiles_controller_spec.rb:7:in `block (3 levels) in <top (required)>'

  206) Admin::ProfilesController successful POST to index redirects to profile page
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/profiles_controller_spec.rb:20:in `block (3 levels) in <top (required)>'

  207) Admin::RedirectsController test_create
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/redirects_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  208) Admin::RedirectsController test_create with empty from path
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/redirects_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  209) Admin::RedirectsController test_update
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/redirects_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  210) Admin::RedirectsController#index should display index with redirects
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/redirects_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  211) Admin::RedirectsController#edit should render new template with valid redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/redirects_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  212) Admin::RedirectsController test_destroy with GET should render destroy template
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/redirects_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  213) Admin::RedirectsController test_destroy with POST should redirect to index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/redirects_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  214) Admin::RedirectsController test_destroy with POST should have no more redirects
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/redirects_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  215) Admin::ResourcesController test_destroy_image with POST
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/resources_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  216) Admin::ResourcesController test_upload
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/resources_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  217) Admin::ResourcesController test_index should render index template
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/resources_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  218) Admin::ResourcesController test_destroy_image with get should render template destroy
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/resources_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  219) Admin::ResourcesController test_destroy_image with get should have a valid file
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/resources_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  220) Admin::SeoController#index should render index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/seo_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  221) Admin::SeoController#permalinks should render permalinks
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/seo_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  222) Admin::SeoController#titles should render titles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/seo_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  223) Admin::SeoController update action should success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/seo_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  224) Admin::SeoController update action should not save blog with bad permalink format
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/seo_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  225) Admin::SettingsController#index should render index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/settings_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  226) Admin::SettingsController write action should be success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/settings_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  227) Admin::SettingsController feedback action should be sucess
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/settings_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  228) Admin::SettingsController redirect action should be success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/settings_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  229) Admin::SettingsController update action should success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/settings_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  230) Admin::SettingsController update action should not save blog with bad permalink format
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/settings_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  231) Admin::SidebarController rendering test_index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/sidebar_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  232) Admin::TagsController index action should be success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  233) Admin::TagsController index action should render template index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  234) Admin::TagsController edit action should be success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  235) Admin::TagsController edit action should render template edit
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  236) Admin::TagsController edit action should assigns value :tag
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  237) Admin::TagsController destroy action with GET should be success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  238) Admin::TagsController destroy action with GET should have an id in the form destination
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  239) Admin::TagsController destroy action with GET should render template edit
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  240) Admin::TagsController destroy action with GET should assigns value :tag
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  241) Admin::TagsController destroy action with POST should redirect to index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  242) Admin::TagsController destroy action with POST should have one less tags
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  243) Admin::TagsController update action should redirect to index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  244) Admin::TagsController update action should update tag
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  245) Admin::TagsController update action should create a redirect from the old to the new
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  246) Admin::TextfiltersController macro help action should render success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/textfilters_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  247) Admin::ThemesController redirects to :index after the :switchto action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/themes_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  248) Admin::ThemesController returns succes for the :preview action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/themes_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  249) Admin::ThemesController test index assigns @themes for the :index action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/themes_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  250) Admin::UsersController rough port of the old functional test  when you are admin test_index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/users_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  251) Admin::UsersController rough port of the old functional test  when you are admin test_new
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/users_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  252) Admin::UsersController rough port of the old functional test  when you are admin test_destroy
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/users_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  253) Admin::UsersController rough port of the old functional test  when you are admin #EDIT action with POST request should redirect to index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/users_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  254) Admin::UsersController rough port of the old functional test  when you are admin #EDIT action with GET request with no id params it should behave like edit admin render should render template edit
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "edit admin render" called from ./spec/controllers/admin/users_controller_spec.rb:55
     # ./spec/controllers/admin/users_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  255) Admin::UsersController rough port of the old functional test  when you are admin #EDIT action with GET request with no id params it should behave like edit admin render should assigns tobi user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "edit admin render" called from ./spec/controllers/admin/users_controller_spec.rb:55
     # ./spec/controllers/admin/users_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  256) Admin::UsersController rough port of the old functional test  when you are admin #EDIT action with GET request with id params it should behave like edit admin render should render template edit
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "edit admin render" called from ./spec/controllers/admin/users_controller_spec.rb:62
     # ./spec/controllers/admin/users_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  257) Admin::UsersController rough port of the old functional test  when you are admin #EDIT action with GET request with id params it should behave like edit admin render should assigns tobi user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "edit admin render" called from ./spec/controllers/admin/users_controller_spec.rb:62
     # ./spec/controllers/admin/users_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  258) Admin::UsersController rough port of the old functional test when you are not admin don't see the list of user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/users_controller_spec.rb:86:in `block (3 levels) in <top (required)>'

  259) Admin::UsersController rough port of the old functional test when you are not admin EDIT Action try update another user should redirect to login
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/users_controller_spec.rb:86:in `block (3 levels) in <top (required)>'

  260) Admin::UsersController rough port of the old functional test when you are not admin EDIT Action try update another user should not change user profile
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/users_controller_spec.rb:86:in `block (3 levels) in <top (required)>'

  261) ArticlesController should redirect category to /categories
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  262) ArticlesController should redirect tag to /tags
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  263) ArticlesController archives
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  264) ArticlesController index action should be render template index
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  265) ArticlesController index action should show some articles
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  266) ArticlesController index action should have good link feed rss
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  267) ArticlesController index action should have good link feed atom
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  268) ArticlesController index action should have a canonical url
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  269) ArticlesController index action should have googd title
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  270) ArticlesController index action should have a custom tracking field
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  271) ArticlesController#search action should render feed rss by search
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  272) ArticlesController#search action should render feed atom by search
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  273) ArticlesController#search action search with empty result
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  274) ArticlesController#search action a valid search should render template search
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  275) ArticlesController#search action a valid search should assigns articles
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  276) ArticlesController#search action a valid search should have good feed rss link
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  277) ArticlesController#search action a valid search should have good feed atom link
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  278) ArticlesController#search action a valid search should have a canonical url
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  279) ArticlesController#search action a valid search should have a good title
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  280) ArticlesController#search action a valid search should have content markdown interpret and without html tag
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  281) ArticlesController#search action a valid search should have a custom tracking field
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  282) ArticlesController#livesearch action with a query with several words should be valid
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  283) ArticlesController#livesearch action with a query with several words should render without layout
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  284) ArticlesController#livesearch action with a query with several words should render template live_search
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  285) ArticlesController#livesearch action with a query with several words should not have h3 tag
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  286) ArticlesController#livesearch action with a query with several words should assign @search the search string
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  287) ArticlesController index for a month should render template index
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  288) ArticlesController index for a month should contain some articles
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  289) ArticlesController index for a month should have a canonical url
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  290) ArticlesController index for a month should have a good title
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  291) ArticlesController index for a month should have a custom tracking field
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  292) ArticlesController nousers redirects to signup
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:237:in `block (2 levels) in <top (required)>'

  293) ArticlesController feeds /articles.atom => an atom feed
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:252:in `block (2 levels) in <top (required)>'

  294) ArticlesController feeds /articles.rss => an RSS 2.0 feed
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:252:in `block (2 levels) in <top (required)>'

  295) ArticlesController feeds atom feed for archive should be valid
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:252:in `block (2 levels) in <top (required)>'

  296) ArticlesController feeds RSS feed for archive should be valid
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:252:in `block (2 levels) in <top (required)>'

  297) ArticlesController the index should ignore the HTTP Accept: header
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:297:in `block (2 levels) in <top (required)>'

  298) ArticlesController previewing with non logged user should redirect to login
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  299) ArticlesController previewing with logged user should render template /articles/read
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  300) ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/standard_issue/views/articles/read
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  301) ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/true-blue-3/views/articles/read
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  302) ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/typographic/views/articles/read
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  303) ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/true-red/views/articles/read
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  304) ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/bootstrap/views/articles/read
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  305) ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/dirtylicious/views/articles/read
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  306) ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/scribbish/views/articles/read
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  307) ArticlesController previewing with logged user should assigns article define with id
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  308) ArticlesController previewing with logged user should assigns last article with id like parent_id
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  309) ArticlesController redirecting should get good article with utf8 slug
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:447:in `block (2 levels) in <top (required)>'

  310) ArticlesController redirecting should get good article with pre-escaped utf8 slug using unescaped slug
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:456:in `block (2 levels) in <top (required)>'

  311) ArticlesController redirecting with explicit redirects should redirect from known URL
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:365:in `block (3 levels) in <top (required)>'

  312) ArticlesController redirecting with explicit redirects should not redirect from unknown URL
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:386:in `block (3 levels) in <top (required)>'

  313) ArticlesController redirecting with explicit redirects and non-empty relative_url_root should redirect
     Failure/Error: b = Factory(:blog, :base_url => "http://test.host/blog")
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:404:in `block (4 levels) in <top (required)>'

  314) ArticlesController redirecting with explicit redirects and non-empty relative_url_root should redirect if to_path includes relative_url_root
     Failure/Error: b = Factory(:blog, :base_url => "http://test.host/blog")
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:404:in `block (4 levels) in <top (required)>'

  315) ArticlesController redirecting with explicit redirects and non-empty relative_url_root should ignore the blog base_url if the to_path is a full uri
     Failure/Error: b = Factory(:blog, :base_url => "http://test.host/blog")
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:404:in `block (4 levels) in <top (required)>'

  316) ArticlesController redirecting accessing old-style URL with "articles" as the first part should redirect to article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:465:in `block (3 levels) in <top (required)>'

  317) ArticlesController redirecting accessing old-style URL with "articles" as the first part should redirect to article with url_root
     Failure/Error: b = Factory(:blog, :base_url => "http://test.host/blog")
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:476:in `block (3 levels) in <top (required)>'

  318) ArticlesController redirecting accessing old-style URL with "articles" as the first part should redirect to article with articles in url_root
     Failure/Error: b = Factory(:blog, :base_url => "http://test.host/aaa/articles/bbb")
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:487:in `block (3 levels) in <top (required)>'

  319) ArticlesController redirecting with permalink_format like %title%.html accessing various non-matching URLs should not find '.htmlsecond-blog-article'
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  320) ArticlesController redirecting with permalink_format like %title%.html accessing various non-matching URLs should not find 'second-blog-article.html.html'
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  321) ArticlesController redirecting with permalink_format like %title%.html accessing various non-matching URLs should not find 'second-blog-article.html/foo'
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  322) ArticlesController redirecting with permalink_format like %title%.html accessing legacy URLs should redirect from default URL format
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  323) ArticlesController redirecting with permalink_format like %title%.html accessing legacy URLs should redirect from old-style URL format with "articles" part
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  324) ArticlesController redirecting with permalink_format like %title%.html accessing an article should render template read to article
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  325) ArticlesController redirecting with permalink_format like %title%.html accessing an article should assign article1 to @article
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  326) ArticlesController redirecting with permalink_format like %title%.html accessing an article the resulting page should have good rss feed link
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  327) ArticlesController redirecting with permalink_format like %title%.html accessing an article the resulting page should have good atom feed link
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  328) ArticlesController redirecting with permalink_format like %title%.html accessing an article the resulting page should have a canonical url
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  329) ArticlesController redirecting with permalink_format like %title%.html accessing an article the resulting page should have a good title
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  330) ArticlesController redirecting with permalink_format like %title%.html rendering as atom feed should render feedback atom feed
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  331) ArticlesController redirecting with permalink_format like %title%.html rendering as rss feed should render rss20 partial
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  332) ArticlesController redirecting with a format containing a fixed component should find the article if the url matches all components
     Failure/Error: b = Factory(:blog, :permalink_format => '/foo/%title%')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:607:in `block (3 levels) in <top (required)>'

  333) ArticlesController redirecting with a format containing a fixed component should not find the article if the url does not match the fixed component
     Failure/Error: b = Factory(:blog, :permalink_format => '/foo/%title%')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:607:in `block (3 levels) in <top (required)>'

  334) ArticlesController redirecting with a custom format with several fixed parts and several variables should find the article if the url matches all components
     Failure/Error: b = Factory(:blog, :permalink_format => '/foo/bar/%year%/%month%/%title%')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:625:in `block (3 levels) in <top (required)>'

  335) ArticlesController redirecting with a custom format with several fixed parts and several variables should not find the article if the url only matches some components
     Failure/Error: b = Factory(:blog, :permalink_format => '/foo/bar/%year%/%month%/%title%')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:625:in `block (3 levels) in <top (required)>'

  336) ArticlesController password protected article alone should be password protected
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:660:in `block (2 levels) in <top (required)>'

  337) ArticlesController password protected #check_password shows article when given correct password
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:660:in `block (2 levels) in <top (required)>'

  338) ArticlesController password protected #check_password shows password form when given incorrect password
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:660:in `block (2 levels) in <top (required)>'

  339) ArticlesController assigned keywords article with categories should have meta keywords
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:684:in `block (2 levels) in <top (required)>'

  340) ArticlesController assigned keywords article with neither categories nor tags should not have meta keywords
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:684:in `block (2 levels) in <top (required)>'

  341) ArticlesController assigned keywords index without option and no blog keywords should not have meta keywords
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:684:in `block (2 levels) in <top (required)>'

  342) ArticlesController assigned keywords index without option but with blog keywords should have meta keywords
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:684:in `block (2 levels) in <top (required)>'

  343) AuthorsController#show as html renders the :show template
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  344) AuthorsController#show as html assigns author
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  345) AuthorsController#show as html assigns articles as published articles
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  346) AuthorsController#show as html when rendered has a link to the rss feed
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  347) AuthorsController#show as html when rendered has a link to the atom feed
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  348) AuthorsController#show as an atom feed assigns articles as published articles
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  349) AuthorsController#show as an atom feed renders the atom template
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  350) AuthorsController#show as an atom feed does not render layout
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  351) AuthorsController#show as an rss feed assigns articles as published articles
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  352) AuthorsController#show as an rss feed renders the rss template
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  353) AuthorsController#show as an rss feed does not render layout
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  354) AuthorsController SEO options should never have meta keywords with deactivated option
     Failure/Error: Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:84:in `block (2 levels) in <top (required)>'

  355) AuthorsController SEO options should never have meta keywords with deactivated option
     Failure/Error: Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:91:in `block (2 levels) in <top (required)>'

  356) BackendController when called through Blogger API test_blogger_delete_post
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  357) BackendController when called through Blogger API test_blogger_get_users_blogs
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  358) BackendController when called through Blogger API test_blogger_get_user_info
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  359) BackendController when called through Blogger API test_blogger_new_post
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  360) BackendController when called through Blogger API test_blogger_new_post_no_title
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  361) BackendController when called through Blogger API test_blogger_new_post_with_categories
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  362) BackendController when called through Blogger API test_blogger_new_post_with_non_existing_categories
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  363) BackendController when called through Blogger API test_blogger_fail_authentication
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  364) BackendController when called through the MetaWeblog API test_meta_weblog_get_categories
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  365) BackendController when called through the MetaWeblog API test_meta_weblog_get_post
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  366) BackendController when called through the MetaWeblog API test_meta_weblog_get_recent_posts
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  367) BackendController when called through the MetaWeblog API test_meta_weblog_delete_post
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  368) BackendController when called through the MetaWeblog API test_meta_weblog_new_post_fails
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  369) BackendController when called through the MetaWeblog API test_meta_weblog_new_post
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  370) BackendController when called through the MetaWeblog API test_meta_weblog_new_unpublished_post_with_blank_creation_date
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  371) BackendController when called through the MetaWeblog API should set categories if specified in new post
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  372) BackendController when called through the MetaWeblog API test_meta_weblog_edit_unpublished_post_with_old_creation_date
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  373) BackendController when called through the MetaWeblog API test_meta_weblog_new_media_object
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  374) BackendController when called through the MetaWeblog API test_meta_weblog_fail_authentication
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  375) BackendController when called through the MetaWeblog API test_meta_weblog_should_preserve_date_time_on_roundtrip_edit
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  376) BackendController when called through the MetaWeblog API when editing a post test_meta_weblog_edit_post
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  377) BackendController when called through the MetaWeblog API when editing a post should set categories if specified
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  378) BackendController when called through the Movable Type API test_mt_get_category_list
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  379) BackendController when called through the Movable Type API test_mt_get_post_categories
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  380) BackendController when called through the Movable Type API test_mt_get_recent_post_titles
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  381) BackendController when called through the Movable Type API test_mt_set_post_categories
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  382) BackendController when called through the Movable Type API test_mt_supported_text_filters
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  383) BackendController when called through the Movable Type API test_mt_supported_methods
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  384) BackendController when called through the Movable Type API test_mt_get_trackback_pings
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  385) BackendController when called through the Movable Type API should publish post
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  386) BackendController when called through the Movable Type API test_mt_fail_authentication
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  387) CategoriesController /index normally 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  388) CategoriesController /index normally 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  389) CategoriesController /index normally 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  390) CategoriesController /index normally when rendered 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  391) CategoriesController /index if :index template exists should render :index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  392) CategoriesController#show should be successful
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  393) CategoriesController#show should render :show by default
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  394) CategoriesController#show should fall back to rendering articles/index
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  395) CategoriesController#show should render personal when template exists
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  396) CategoriesController#show should show only published articles
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  397) CategoriesController#show should set the page title to "Category Personal"
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  398) CategoriesController#show should render the atom feed for /articles/category/personal.atom
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  399) CategoriesController#show should render the rss feed for /articles/category/personal.rss
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  400) CategoriesController#show when rendered should have a canonical URL
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  401) CategoriesController empty category life-on-mars should redirect to home when the category is empty
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:136:in `block (2 levels) in <top (required)>'

  402) CategoriesController password protected article should be password protected when shown in category
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:148:in `block (2 levels) in <top (required)>'

  403) CategoriesController SEO Options category without meta keywords and activated options (use_meta_keyword ON) should not have meta keywords
     Failure/Error: Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:164:in `block (2 levels) in <top (required)>'

  404) CategoriesController SEO Options category with keywords and activated option (use_meta_keyword ON) should have meta keywords
     Failure/Error: Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:172:in `block (2 levels) in <top (required)>'

  405) CategoriesController SEO Options category with meta keywords and deactivated options (use_meta_keyword off) should not have meta keywords
     Failure/Error: Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:177:in `block (2 levels) in <top (required)>'

  406) CategoriesController SEO Options with unindex_categories (set ON), should have rel nofollow
     Failure/Error: Factory(:blog, :unindex_categories => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:182:in `block (2 levels) in <top (required)>'

  407) CategoriesController SEO Options without unindex_categories (set OFF), should not have rel nofollow
     Failure/Error: Factory(:blog, :unindex_categories => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:187:in `block (2 levels) in <top (required)>'

  408) CommentsController#create should redirect to the article
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  409) CommentsController#create Basic comment creation should assign the new comment to @comment
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  410) CommentsController#create Basic comment creation should assign the article to @article
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  411) CommentsController#create Basic comment creation should save the comment
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  412) CommentsController#create Basic comment creation should set the author
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  413) CommentsController#create Basic comment creation should set an author cookie
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  414) CommentsController#create Basic comment creation should set a gravatar_id cookie
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  415) CommentsController#create Basic comment creation should set a url cookie
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  416) CommentsController AJAX creation should render the comment partial
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  417) CommentsController#index scoped index GET 2007/10/11/slug/comments should redirect to /2007/10/11/slug#comments
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  418) CommentsController#index without format should be successful
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  419) CommentsController#index without format should not bother fetching any comments 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  420) CommentsController#index with :format => 'atom' without article is succesful
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  421) CommentsController#index with :format => 'atom' without article passes the comments to the template
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  422) CommentsController#index with :format => 'atom' without article should return an atom feed
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  423) CommentsController#index with :format => 'atom' with an article should return an atom feed
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  424) CommentsController#index with :format => 'rss' without article is succesful
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  425) CommentsController#index with :format => 'rss' without article passes the comments to the template
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  426) CommentsController#index with :format => 'rss' without article should return an rss feed
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  427) CommentsController#index with :format => 'rss' with article should return an rss feed
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  428) GroupingController should set meta robots to noindex follow when tag controller and unindex_tags options is true
     Failure/Error: Factory(:blog, :unindex_tags => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/grouping_controller_spec.rb:7:in `block (3 levels) in <top (required)>'

  429) GroupingController should set meta robots to noindex follow when category controller and unindex_categories optinos is true
     Failure/Error: Factory(:blog, :unindex_categories => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/grouping_controller_spec.rb:12:in `block (3 levels) in <top (required)>'

  430) GroupingController should set meta robots to noindex follow when page params not blank and unindex_tags and unindex_categories are set to false
     Failure/Error: Factory(:blog, :unindex_categories => false, :unindex_tags => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/grouping_controller_spec.rb:17:in `block (3 levels) in <top (required)>'

  431) GroupingController should not set meta robots to noindex follow when tag controller and unindex_tags options is false and page params nil
     Failure/Error: Factory(:blog, :unindex_tags => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/grouping_controller_spec.rb:24:in `block (3 levels) in <top (required)>'

  432) GroupingController should not set meta robots to noindex follow when categoriy controller and unindex_categories options is false and page params nil
     Failure/Error: Factory(:blog, :unindex_categories => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/grouping_controller_spec.rb:29:in `block (3 levels) in <top (required)>'

  433) SetupController when a blog is configured and has some users GET setup 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/setup_controller_spec.rb:62:in `block (4 levels) in <top (required)>'

  434) SetupController when a blog is configured and has some users POST setup 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/setup_controller_spec.rb:71:in `block (4 levels) in <top (required)>'

  435) SetupController when a blog is configured and has some users POST setup should not initialize blog and users
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/setup_controller_spec.rb:71:in `block (4 levels) in <top (required)>'

  436) TagsController /index normally 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  437) TagsController /index normally 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  438) TagsController /index normally 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  439) TagsController /index normally 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  440) TagsController /index if :index template exists should render :index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  441) TagsController showing a single tag with some articles should be successful
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:36:in `block (2 levels) in <top (required)>'

  442) TagsController showing a single tag with some articles should retrieve the correct set of articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:36:in `block (2 levels) in <top (required)>'

  443) TagsController showing a single tag with some articles should render :show by default
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:36:in `block (2 levels) in <top (required)>'

  444) TagsController showing a single tag with some articles should fall back to rendering articles/index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:36:in `block (2 levels) in <top (required)>'

  445) TagsController showing a single tag with some articles should set the page title to "Tag foo"
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:36:in `block (2 levels) in <top (required)>'

  446) TagsController showing a single tag with some articles should render the atom feed for /articles/tag/foo.atom
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:36:in `block (2 levels) in <top (required)>'

  447) TagsController showing a single tag with some articles should render the rss feed for /articles/tag/foo.rss
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:36:in `block (2 levels) in <top (required)>'

  448) TagsController showing a single tag without articles should redirect to main page
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:36:in `block (2 levels) in <top (required)>'

  449) TagsController showing tag "foo" should have good rss feed link in head
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:108:in `block (2 levels) in <top (required)>'

  450) TagsController showing tag "foo" should have good atom feed link in head
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:108:in `block (2 levels) in <top (required)>'

  451) TagsController showing tag "foo" should have a canonical URL
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:108:in `block (2 levels) in <top (required)>'

  452) TagsController showing a non-existant tag should redirect to main page
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:130:in `block (2 levels) in <top (required)>'

  453) TagsController password protected article article in tag should be password protected
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:142:in `block (2 levels) in <top (required)>'

  454) TagsController SEO Options should have rel nofollow
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:156:in `block (2 levels) in <top (required)>'

  455) TagsController SEO Options should not have rel nofollow
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:156:in `block (2 levels) in <top (required)>'

  456) TagsController SEO Options should not have meta keywords with deactivated option and no blog keywords
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:156:in `block (2 levels) in <top (required)>'

  457) TagsController SEO Options should not have meta keywords with deactivated option and blog keywords
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:156:in `block (2 levels) in <top (required)>'

  458) TagsController SEO Options should not have meta keywords with activated option and no blog keywords
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:156:in `block (2 levels) in <top (required)>'

  459) TagsController SEO Options should have meta keywords with activated option and blog keywords
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:156:in `block (2 levels) in <top (required)>'

  460) ThemeController test_stylesheets
     Failure/Error: before(:each) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/theme_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  461) ThemeController test_images
     Failure/Error: before(:each) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/theme_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  462) ThemeController test_malicious_path
     Failure/Error: before(:each) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/theme_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  463) ThemeController test_view_theming
     Failure/Error: before(:each) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/theme_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  464) ApplicationHelper#render_flash should render empty string if no flash
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  465) ApplicationHelper#render_flash should render a good render if only one notice
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  466) ApplicationHelper#render_flash should render the notice and error flash
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  467) ApplicationHelper#link_to_permalink for a simple ascii-only permalink 
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  468) ApplicationHelper#link_to_permalink for a simple ascii-only permalink 
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  469) ApplicationHelper#link_to_permalink for a multibyte permalink escapes the multibyte characters
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  470) ApplicationHelper#display_date should return date with format %d/%m/%y
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  471) ApplicationHelper#display_date should return date with format %m/%m/%y
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  472) ApplicationHelper#display_date should return date with format %d %b %Y
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  473) ApplicationHelper#display_date should return date with format %b %d %Y
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  474) ApplicationHelper#display_date should return time with format %I:%M%p
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  475) ApplicationHelper#display_date should return time with format %H:%M
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  476) ApplicationHelper#display_date should return time with format %Hh%M
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  477) SidebarHelper#render_sidebars with an invalid sidebar should return a friendly error message
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/sidebar_helper_spec.rb:13:in `block (2 levels) in <top (required)>'

  478) SidebarHelper#render_sidebars with a valid sidebar should render the sidebar
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/sidebar_helper_spec.rb:13:in `block (2 levels) in <top (required)>'

  479) CommentClosing from Test::Unit; no I don't know why it's in article_closing_spec.rb test_new_article_should_be_open_if_auto_close_is_zero
     Failure/Error: @blog = Factory(:blog,
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/article_closing_spec.rb:9:in `block (2 levels) in <top (required)>'

  480) CommentClosing from Test::Unit; no I don't know why it's in article_closing_spec.rb test_old_article_should_be_open_if_auto_close_is_zero
     Failure/Error: @blog = Factory(:blog,
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/article_closing_spec.rb:9:in `block (2 levels) in <top (required)>'

  481) CommentClosing from Test::Unit; no I don't know why it's in article_closing_spec.rb test_new_article_should_be_open_if_auto_close_is_thirty
     Failure/Error: @blog = Factory(:blog,
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/article_closing_spec.rb:9:in `block (2 levels) in <top (required)>'

  482) CommentClosing from Test::Unit; no I don't know why it's in article_closing_spec.rb test_old_article_should_be_closed_if_auto_close_is_thirty
     Failure/Error: @blog = Factory(:blog,
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/article_closing_spec.rb:9:in `block (2 levels) in <top (required)>'

  483) Article test_find_published
     Failure/Error: assert_equal 1, @articles.size
     MiniTest::Assertion:
       <1> expected but was
       <2>.
     # ./spec/models/article_spec.rb:256:in `block (2 levels) in <top (required)>'

  484) Article#search with several words and no result should be empty
     Failure/Error: @articles.should be_empty
       expected empty? to return true, got false
     # ./spec/models/article_spec.rb:427:in `block (4 levels) in <top (required)>'

  485) The first blog should be the only blog allowed
     Failure/Error: @blog = Factory.create :blog
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/blog_spec.rb:53:in `block (2 levels) in <top (required)>'

  486) The default blog should pick up updates after a cache clear
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/blog_spec.rb:63:in `block (2 levels) in <top (required)>'

  487) Given no blogs, a new default blog should be valid after filling the title
     Failure/Error: @blog.should be_valid
       expected #<Blog id: nil, settings: {"blog_name"=>"something not empty"}, base_url: nil> to be valid, but got errors: There can only be one...
     # ./spec/models/blog_spec.rb:79:in `block (2 levels) in <top (required)>'

  488) Given no blogs, a new default blog should be valid without filling the title
     Failure/Error: @blog.should be_valid
       expected #<Blog id: nil, settings: {}, base_url: nil> to be valid, but got errors: There can only be one...
     # ./spec/models/blog_spec.rb:84:in `block (2 levels) in <top (required)>'

  489) Valid permalink in blog should be valid with only %title%
     Failure/Error: @blog.should be_valid
       expected #<Blog id: nil, settings: {"permalink_format"=>"%title%"}, base_url: nil> to be valid, but got errors: There can only be one...
     # ./spec/models/blog_spec.rb:114:in `block (3 levels) in <top (required)>'

  490) Valid permalink in blog should be valid with only %title%.html
     Failure/Error: @blog.should be_valid
       expected #<Blog id: nil, settings: {"permalink_format"=>"%title%.html"}, base_url: nil> to be valid, but got errors: There can only be one...
     # ./spec/models/blog_spec.rb:114:in `block (3 levels) in <top (required)>'

  491) Valid permalink in blog should be valid with only /hello/all/%year%/%title%
     Failure/Error: @blog.should be_valid
       expected #<Blog id: nil, settings: {"permalink_format"=>"/hello/all/%year%/%title%"}, base_url: nil> to be valid, but got errors: There can only be one...
     # ./spec/models/blog_spec.rb:114:in `block (3 levels) in <top (required)>'

  492) Valid permalink in blog should be valid with only atom/%title%.html
     Failure/Error: @blog.should be_valid
       expected #<Blog id: nil, settings: {"permalink_format"=>"atom/%title%.html"}, base_url: nil> to be valid, but got errors: There can only be one...
     # ./spec/models/blog_spec.rb:114:in `block (3 levels) in <top (required)>'

  493) Valid permalink in blog should be valid with only ok/rss/%title%.html
     Failure/Error: @blog.should be_valid
       expected #<Blog id: nil, settings: {"permalink_format"=>"ok/rss/%title%.html"}, base_url: nil> to be valid, but got errors: There can only be one...
     # ./spec/models/blog_spec.rb:114:in `block (3 levels) in <top (required)>'

  494) Given a published article An unchanged article does not invalidate the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:5:in `block (2 levels) in <top (required)>'

  495) Given a published article changing the body smashes the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:5:in `block (2 levels) in <top (required)>'

  496) Given a published article withdrawing it smashes the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:5:in `block (2 levels) in <top (required)>'

  497) Given a published article destroying it smashes the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:5:in `block (2 levels) in <top (required)>'

  498) Given a published article withdrawing, then destroying it smashes the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:5:in `block (2 levels) in <top (required)>'

  499) Given an unpublished article publishing smashes the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:38:in `block (2 levels) in <top (required)>'

  500) Given an unpublished article changing it keeps the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:38:in `block (2 levels) in <top (required)>'

  501) Given an unpublished article destroying it keeps the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:38:in `block (2 levels) in <top (required)>'

  502) Given an unpublished spammy comment changing it does not alter the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:60:in `block (2 levels) in <top (required)>'

  503) Given an unpublished spammy comment publishing it does alter the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:60:in `block (2 levels) in <top (required)>'

  504) Given an unpublished spammy comment destroying it does not alter the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:60:in `block (2 levels) in <top (required)>'

  505) Given a published comment changing it destroys the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:88:in `block (2 levels) in <top (required)>'

  506) Given a published comment unpublishing it destroys the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:88:in `block (2 levels) in <top (required)>'

  507) Given a published comment destroying it destroys the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:88:in `block (2 levels) in <top (required)>'

  508) Given an unpublished spammy trackback changing it does not alter the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:111:in `block (2 levels) in <top (required)>'

  509) Given an unpublished spammy trackback publishing it does alter the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:111:in `block (2 levels) in <top (required)>'

  510) Given an unpublished spammy trackback destroying it does not alter the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:111:in `block (2 levels) in <top (required)>'

  511) Given a published trackback changing it destroys the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:137:in `block (2 levels) in <top (required)>'

  512) Given a published trackback unpublishing it destroys the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:137:in `block (2 levels) in <top (required)>'

  513) Given a published trackback destroying it destroys the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:137:in `block (2 levels) in <top (required)>'

  514) Category should know published_articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/category_spec.rb:19:in `block (2 levels) in <top (required)>'

  515) Category empty permalink should be converted
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/category_spec.rb:28:in `block (2 levels) in <top (required)>'

  516) Category category with permalink should not have permalink generated
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/category_spec.rb:34:in `block (2 levels) in <top (required)>'

  517) Category permalink 
     Failure/Error: before(:each) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/category_spec.rb:43:in `block (3 levels) in <top (required)>'

  518) Comment should have good default filter
     Failure/Error: Factory(:blog, :comment_text_filter => Factory(:markdown))
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:230:in `block (2 levels) in <top (required)>'

  519) Comment#permalink_url should render permalink to comment in public part
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:17:in `block (3 levels) in <top (required)>'

  520) Comment#edit_url should get a url where edit comment in admin
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:32:in `block (3 levels) in <top (required)>'

  521) Comment#delete_url should get the delete url of comment in admin part
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:40:in `block (3 levels) in <top (required)>'

  522) Comment#save should save good comment
     Failure/Error: before(:each) { Factory(:blog, :sp_article_auto_close => 300) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:47:in `block (3 levels) in <top (required)>'

  523) Comment#save should save spam comment
     Failure/Error: before(:each) { Factory(:blog, :sp_article_auto_close => 300) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:47:in `block (3 levels) in <top (required)>'

  524) Comment#save should not save in invalid article
     Failure/Error: before(:each) { Factory(:blog, :sp_article_auto_close => 300) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:47:in `block (3 levels) in <top (required)>'

  525) Comment#save should change old comment
     Failure/Error: before(:each) { Factory(:blog, :sp_article_auto_close => 300) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:47:in `block (3 levels) in <top (required)>'

  526) Comment#save should save a valid comment
     Failure/Error: before(:each) { Factory(:blog, :sp_article_auto_close => 300) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:47:in `block (3 levels) in <top (required)>'

  527) Comment#save should not save with article not allow comment
     Failure/Error: before(:each) { Factory(:blog, :sp_article_auto_close => 300) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:47:in `block (3 levels) in <top (required)>'

  528) Comment#create should create comment
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:95:in `block (3 levels) in <top (required)>'

  529) Comment#create preserves urls starting with https://
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:95:in `block (3 levels) in <top (required)>'

  530) Comment#create preserves urls starting with http://
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:95:in `block (3 levels) in <top (required)>'

  531) Comment#create prepends http:// to urls without protocol
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:95:in `block (3 levels) in <top (required)>'

  532) Comment#spam? should reject spam rbl
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:125:in `block (3 levels) in <top (required)>'

  533) Comment#spam? should not define spam a comment rbl with lookup succeeds
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:125:in `block (3 levels) in <top (required)>'

  534) Comment#spam? should reject spam with uri limit
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:125:in `block (3 levels) in <top (required)>'

  535) Comment reject xss should reject with filter ''
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:166:in `block (3 levels) in <top (required)>'

  536) Comment reject xss should reject with filter 'textile'
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:166:in `block (3 levels) in <top (required)>'

  537) Comment reject xss should reject with filter 'markdown'
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:166:in `block (3 levels) in <top (required)>'

  538) Comment reject xss should reject with filter 'smartypants'
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:166:in `block (3 levels) in <top (required)>'

  539) Comment reject xss should reject with filter 'markdown smartypants'
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:166:in `block (3 levels) in <top (required)>'

  540) Comment change state should becomes withdraw
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:187:in `block (3 levels) in <top (required)>'

  541) Comment change state should becomes not published in article if withdraw
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:187:in `block (3 levels) in <top (required)>'

  542) Comment change state should becomes confirmed if withdrawn
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:187:in `block (3 levels) in <top (required)>'

  543) Comment with feedback moderation enabled should save comment as presumably spam
     Failure/Error: @blog = Factory(:blog,
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:237:in `block (3 levels) in <top (required)>'

  544) Comment with feedback moderation enabled should save comment as confirmed ham
     Failure/Error: @blog = Factory(:blog,
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:237:in `block (3 levels) in <top (required)>'

  545) FeedbackStates from Test::Unit test_ham_all_the_way
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/content_state/feedback_states_spec.rb:5:in `block (2 levels) in <top (required)>'

  546) FeedbackStates from Test::Unit test_spam_all_the_way
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/content_state/feedback_states_spec.rb:5:in `block (2 levels) in <top (required)>'

  547) FeedbackStates from Test::Unit test_presumed_spam_marked_as_ham
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/content_state/feedback_states_spec.rb:5:in `block (2 levels) in <top (required)>'

  548) FeedbackStates from Test::Unit test_presumed_ham_marked_as_spam
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/content_state/feedback_states_spec.rb:5:in `block (2 levels) in <top (required)>'

  549) Testing redirects a new published page gets a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/page_spec.rb:14:in `block (2 levels) in <top (required)>'

  550) Testing redirects a new unpublished page should not get a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/page_spec.rb:22:in `block (2 levels) in <top (required)>'

  551) Testing redirects Changin a published article permalink url should only change the to redirection
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/page_spec.rb:29:in `block (2 levels) in <top (required)>'

  552) Given the fixture :first_page Pages cannot have the same name
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/page_spec.rb:46:in `block (2 levels) in <top (required)>'

  553) Given the fixture :first_page should give a sanitized title
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/page_spec.rb:46:in `block (2 levels) in <top (required)>'

  554) Given the fixture :first_page #permalink_url 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/page_spec.rb:46:in `block (2 levels) in <top (required)>'

  555) Given a valid page default filter should be fetched from the blog
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/page_spec.rb:123:in `block (2 levels) in <top (required)>'

  556) Ping::Pinger with Test::Unit test_pingback_url_nil
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_pinger_spec.rb:5:in `block (2 levels) in <top (required)>'

  557) Ping::Pinger with Test::Unit test_pingback_url_from_body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_pinger_spec.rb:5:in `block (2 levels) in <top (required)>'

  558) Ping::Pinger with Test::Unit test_pingback_url
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_pinger_spec.rb:5:in `block (2 levels) in <top (required)>'

  559) Given a post which references a pingback enabled article Pingback sent to url found in referenced header
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_spec.rb:16:in `block (2 levels) in <top (required)>'

  560) Given a post which references a pingback enabled article Pingback sent to url found in referenced body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_spec.rb:23:in `block (2 levels) in <top (required)>'

  561) Given a post which references a pingback enabled article Pingback sent when new article is saved
     Failure/Error: Factory(:blog, :send_outbound_pings => 1)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_spec.rb:35:in `block (2 levels) in <top (required)>'

  562) An article links to another article, which contains a trackback URL Trackback URL is detected and pinged
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_spec.rb:76:in `block (2 levels) in <top (required)>'

  563) An article links to another article, which contains a trackback URL sends a trackback without html tag in excerpt
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_spec.rb:76:in `block (2 levels) in <top (required)>'

  564) An article links to another article, which contains a trackback URL sends a trackback without markdown tag in excerpt
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_spec.rb:76:in `block (2 levels) in <top (required)>'

  565) Given a remote site to notify, eg technorati we can ping them correctly
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_spec.rb:150:in `block (2 levels) in <top (required)>'

  566) PostType post types are unique
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/post_type_spec.rb:6:in `block (2 levels) in <top (required)>'

  567) PostType Given a new post type should give a valid post type
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/post_type_spec.rb:6:in `block (2 levels) in <top (required)>'

  568) PostType Given a new post type should have a sanitized permalink
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/post_type_spec.rb:6:in `block (2 levels) in <top (required)>'

  569) PostType Given a new post type should have a sanitized permalink with a
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/post_type_spec.rb:6:in `block (2 levels) in <top (required)>'

  570) Sidebar#find_all_visible returns only the sidebar with active position
     Failure/Error: sidebars.size.should == 1
       expected: 1
            got: 6 (using ==)
     # ./spec/models/sidebar_spec.rb:18:in `block (3 levels) in <top (required)>'

  571) Tag we can Tag.get by name
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/tag_spec.rb:5:in `block (2 levels) in <top (required)>'

  572) Tag tags are unique
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/tag_spec.rb:5:in `block (2 levels) in <top (required)>'

  573) Tag display names with spaces can be found by dash joined name
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/tag_spec.rb:5:in `block (2 levels) in <top (required)>'

  574) Tag articles can be tagged
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/tag_spec.rb:5:in `block (2 levels) in <top (required)>'

  575) Tag find_all_with_article_counters finds 2 tags
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/tag_spec.rb:5:in `block (2 levels) in <top (required)>'

  576) Tag permalink_url should be of form /tag/<name>
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/tag_spec.rb:5:in `block (2 levels) in <top (required)>'

  577) Tag#published_articles should return only published articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/tag_spec.rb:5:in `block (2 levels) in <top (required)>'

  578) With the list of available filters #filter text by name
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  579) With the list of available filters #available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  580) With the list of available filters #available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  581) With the list of available filters #available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  582) With the list of available filters #available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  583) With the list of available filters #available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  584) With the list of available filters #available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  585) With the list of available filters #available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  586) With the list of available filters #available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  587) With the list of available filters #available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  588) With the list of available filters #macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  589) With the list of available filters #macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  590) With the list of available filters #macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  591) With the list of available filters #macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  592) With the list of available filters #macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  593) With the list of available filters #macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  594) With the list of available filters #macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  595) With the list of available filters #macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  596) With the list of available filters #macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  597) With the list of available filters #filter_text unknown
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  598) With the list of available filters #filter_text smartypants
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  599) With the list of available filters #filter_text markdown
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  600) With the list of available filters #filter_text filterchain
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  601) With the list of available filters #filter_text test_code_plus_markup_chain
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  602) With the list of available filters #filter_text specific typo tags flickr should show with default settings
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  603) With the list of available filters #filter_text specific typo tags flickr should use default image size
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  604) With the list of available filters #filter_text specific typo tags flickr should use caption
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  605) With the list of available filters #filter_text specific typo tags flickr broken_flickr_link
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  606) With the list of available filters #filter_text code textfilter single line should made nothin if no args
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  607) With the list of available filters #filter_text code textfilter single line should parse ruby lang
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  608) With the list of available filters #filter_text code textfilter single line should parse ruby and xml in same sentence but not in same place
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  609) With the list of available filters #filter_text code textfilter multiline should render ruby
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  610) With the list of available filters #filter_text lightbox should work
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  611) With the list of available filters #filter_text lightbox shoudl use default thumb image size
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  612) With the list of available filters #filter_text lightbox should use default display image size
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  613) With the list of available filters #filter_text lightbox should work with caption
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  614) With the list of available filters #filter_text combining a post-macro with markdown correctly interprets the macro
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  615) With the list of available filters #filter_text combining a post-macro with markdown correctly interprets the macro
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  616) Given the default theme theme should be typographic
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/theme_spec.rb:12:in `block (2 levels) in <top (required)>'

  617) Given the default theme theme description should be correct
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/theme_spec.rb:12:in `block (2 levels) in <top (required)>'

  618) Given the default theme theme_from_path should find the correct theme
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/theme_spec.rb:12:in `block (2 levels) in <top (required)>'

  619) Given the default theme #search_theme_path finds the right things 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/theme_spec.rb:12:in `block (2 levels) in <top (required)>'

  620) Given the default theme find_all finds all the installed themes
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/theme_spec.rb:12:in `block (2 levels) in <top (required)>'

  621) Trackback With the various trackback filters loaded and DNS mocked out appropriately Incomplete trackbacks should not be accepted
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/trackback_spec.rb:6:in `block (2 levels) in <top (required)>'

  622) Trackback With the various trackback filters loaded and DNS mocked out appropriately A valid trackback should be accepted
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/trackback_spec.rb:6:in `block (2 levels) in <top (required)>'

  623) Trackback With the various trackback filters loaded and DNS mocked out appropriately Trackbacks with a spammy link in the excerpt should be rejected
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/trackback_spec.rb:6:in `block (2 levels) in <top (required)>'

  624) Trackback With the various trackback filters loaded and DNS mocked out appropriately Trackbacks with a spammy source url should be rejected
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/trackback_spec.rb:6:in `block (2 levels) in <top (required)>'

  625) Trackback With the various trackback filters loaded and DNS mocked out appropriately Trackbacks from a spammy ip address should be rejected
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/trackback_spec.rb:6:in `block (2 levels) in <top (required)>'

  626) User With the contents and users fixtures loaded The various article finders work appropriately
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/user_spec.rb:45:in `block (3 levels) in <top (required)>'

  627) User#permalink_url 
     Failure/Error: before(:each) { Factory(:blog, :base_url => 'http://myblog.net/') }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/user_spec.rb:219:in `block (3 levels) in <top (required)>'

  628) articles/feedback_atom_feed.atom.builder with one trackback should render a valid feed
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/feedback_atom_feed_spec.rb:5:in `block (2 levels) in <top (required)>'

  629) articles/feedback_atom_feed.atom.builder with one trackback should render an Atom feed with one item
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/feedback_atom_feed_spec.rb:5:in `block (2 levels) in <top (required)>'

  630) articles/feedback_atom_feed.atom.builder with one trackback the trackback entry should have all the required attributes
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/feedback_atom_feed_spec.rb:5:in `block (2 levels) in <top (required)>'

  631) articles/feedback_atom_feed.atom.builder with a comment with problematic characters should render a valid feed
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/feedback_atom_feed_spec.rb:5:in `block (2 levels) in <top (required)>'

  632) articles/feedback_atom_feed.atom.builder with a comment with problematic characters should render an Atom feed with one item
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/feedback_atom_feed_spec.rb:5:in `block (2 levels) in <top (required)>'

  633) articles/index.html.erb without a theme normally should not have too many paragraph marks around body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  634) articles/index.html.erb without a theme normally should not have div nested inside p
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  635) articles/index.html.erb without a theme normally should not have extra escaped html
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  636) articles/index.html.erb without a theme normally renders the regular article partial twice
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  637) articles/index.html.erb without a theme normally does not render any password forms
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  638) articles/index.html.erb without a theme without search, on page 2 should not have pagination link to page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  639) articles/index.html.erb without a theme without search, on page 2 should have pagination link to page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  640) articles/index.html.erb without a theme when on page 2 of search should not have pagination link to search page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  641) articles/index.html.erb without a theme when on page 2 of search should have pagination link to search page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  642) articles/index.html.erb with theme standard_issue normally should not have too many paragraph marks around body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  643) articles/index.html.erb with theme standard_issue normally should not have div nested inside p
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  644) articles/index.html.erb with theme standard_issue normally should not have extra escaped html
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  645) articles/index.html.erb with theme standard_issue normally renders the regular article partial twice
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  646) articles/index.html.erb with theme standard_issue normally does not render any password forms
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  647) articles/index.html.erb with theme standard_issue without search, on page 2 should not have pagination link to page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  648) articles/index.html.erb with theme standard_issue without search, on page 2 should have pagination link to page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  649) articles/index.html.erb with theme standard_issue when on page 2 of search should not have pagination link to search page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  650) articles/index.html.erb with theme standard_issue when on page 2 of search should have pagination link to search page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  651) articles/index.html.erb with theme true-blue-3 normally should not have too many paragraph marks around body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  652) articles/index.html.erb with theme true-blue-3 normally should not have div nested inside p
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  653) articles/index.html.erb with theme true-blue-3 normally should not have extra escaped html
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  654) articles/index.html.erb with theme true-blue-3 normally renders the regular article partial twice
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  655) articles/index.html.erb with theme true-blue-3 normally does not render any password forms
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  656) articles/index.html.erb with theme true-blue-3 without search, on page 2 should not have pagination link to page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  657) articles/index.html.erb with theme true-blue-3 without search, on page 2 should have pagination link to page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  658) articles/index.html.erb with theme true-blue-3 when on page 2 of search should not have pagination link to search page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  659) articles/index.html.erb with theme true-blue-3 when on page 2 of search should have pagination link to search page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  660) articles/index.html.erb with theme typographic normally should not have too many paragraph marks around body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  661) articles/index.html.erb with theme typographic normally should not have div nested inside p
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  662) articles/index.html.erb with theme typographic normally should not have extra escaped html
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  663) articles/index.html.erb with theme typographic normally renders the regular article partial twice
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  664) articles/index.html.erb with theme typographic normally does not render any password forms
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  665) articles/index.html.erb with theme typographic without search, on page 2 should not have pagination link to page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  666) articles/index.html.erb with theme typographic without search, on page 2 should have pagination link to page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  667) articles/index.html.erb with theme typographic when on page 2 of search should not have pagination link to search page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  668) articles/index.html.erb with theme typographic when on page 2 of search should have pagination link to search page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  669) articles/index.html.erb with theme true-red normally should not have too many paragraph marks around body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  670) articles/index.html.erb with theme true-red normally should not have div nested inside p
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  671) articles/index.html.erb with theme true-red normally should not have extra escaped html
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  672) articles/index.html.erb with theme true-red normally renders the regular article partial twice
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  673) articles/index.html.erb with theme true-red normally does not render any password forms
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  674) articles/index.html.erb with theme true-red without search, on page 2 should not have pagination link to page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  675) articles/index.html.erb with theme true-red without search, on page 2 should have pagination link to page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  676) articles/index.html.erb with theme true-red when on page 2 of search should not have pagination link to search page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  677) articles/index.html.erb with theme true-red when on page 2 of search should have pagination link to search page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  678) articles/index.html.erb with theme bootstrap normally should not have too many paragraph marks around body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  679) articles/index.html.erb with theme bootstrap normally should not have div nested inside p
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  680) articles/index.html.erb with theme bootstrap normally should not have extra escaped html
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  681) articles/index.html.erb with theme bootstrap normally renders the regular article partial twice
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  682) articles/index.html.erb with theme bootstrap normally does not render any password forms
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  683) articles/index.html.erb with theme bootstrap without search, on page 2 should not have pagination link to page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  684) articles/index.html.erb with theme bootstrap without search, on page 2 should have pagination link to page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  685) articles/index.html.erb with theme bootstrap when on page 2 of search should not have pagination link to search page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  686) articles/index.html.erb with theme bootstrap when on page 2 of search should have pagination link to search page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  687) articles/index.html.erb with theme dirtylicious normally should not have too many paragraph marks around body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  688) articles/index.html.erb with theme dirtylicious normally should not have div nested inside p
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  689) articles/index.html.erb with theme dirtylicious normally should not have extra escaped html
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  690) articles/index.html.erb with theme dirtylicious normally renders the regular article partial twice
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  691) articles/index.html.erb with theme dirtylicious normally does not render any password forms
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  692) articles/index.html.erb with theme dirtylicious without search, on page 2 should not have pagination link to page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  693) articles/index.html.erb with theme dirtylicious without search, on page 2 should have pagination link to page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  694) articles/index.html.erb with theme dirtylicious when on page 2 of search should not have pagination link to search page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  695) articles/index.html.erb with theme dirtylicious when on page 2 of search should have pagination link to search page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  696) articles/index.html.erb with theme scribbish normally should not have too many paragraph marks around body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  697) articles/index.html.erb with theme scribbish normally should not have div nested inside p
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  698) articles/index.html.erb with theme scribbish normally should not have extra escaped html
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  699) articles/index.html.erb with theme scribbish normally renders the regular article partial twice
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  700) articles/index.html.erb with theme scribbish normally does not render any password forms
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  701) articles/index.html.erb with theme scribbish without search, on page 2 should not have pagination link to page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  702) articles/index.html.erb with theme scribbish without search, on page 2 should have pagination link to page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  703) articles/index.html.erb with theme scribbish when on page 2 of search should not have pagination link to search page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  704) articles/index.html.erb with theme scribbish when on page 2 of search should have pagination link to search page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  705) First dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:46
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  706) First dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:46
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  707) First dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:46
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  708) First dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:46
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  709) First dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:46
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  710) Second dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:54
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  711) Second dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:54
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  712) Second dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:54
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  713) Second dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:54
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  714) Second dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:54
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  715) Dodgy comment #3 it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:62
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  716) Dodgy comment #3 it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:62
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  717) Dodgy comment #3 it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:62
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  718) Dodgy comment #3 it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:62
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  719) Dodgy comment #3 it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:62
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  720) Extra Dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:70
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  721) Extra Dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:70
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  722) Extra Dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:70
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  723) Extra Dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:70
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  724) Extra Dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:70
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  725) XSS1 it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:80
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  726) XSS1 it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:80
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  727) XSS1 it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:80
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  728) XSS1 it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:80
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  729) XSS1 it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:80
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  730) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:88
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  731) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:88
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  732) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:88
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  733) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:88
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  734) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:88
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  735) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:95
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  736) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:95
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  737) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:95
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  738) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:95
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  739) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:95
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  740) Comment with bare http URL it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:103
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  741) Comment with bare http URL it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:103
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  742) Comment with bare http URL it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:103
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  743) Comment with bare http URL it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:103
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  744) Comment with bare http URL it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:103
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  745) Comment with bare email address it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:111
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  746) Comment with bare email address it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:111
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  747) Comment with bare email address it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:111
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  748) Comment with bare email address it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:111
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  749) Comment with bare email address it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:111
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  750) First dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:163
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  751) First dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:163
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  752) First dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:163
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  753) First dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:163
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  754) First dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:163
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  755) Second dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:171
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  756) Second dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:171
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  757) Second dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:171
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  758) Second dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:171
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  759) Second dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:171
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  760) Dodgy comment #3 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:179
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  761) Dodgy comment #3 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:179
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  762) Dodgy comment #3 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:179
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  763) Dodgy comment #3 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:179
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  764) Dodgy comment #3 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:179
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  765) Extra Dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:187
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  766) Extra Dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:187
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  767) Extra Dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:187
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  768) Extra Dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:187
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  769) Extra Dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:187
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  770) XSS1 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:197
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  771) XSS1 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:197
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  772) XSS1 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:197
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  773) XSS1 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:197
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  774) XSS1 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:197
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  775) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:205
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  776) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:205
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  777) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:205
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  778) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:205
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  779) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:205
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  780) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:212
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  781) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:212
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  782) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:212
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  783) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:212
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  784) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:212
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  785) Comment with bare http URL with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:220
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  786) Comment with bare http URL with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:220
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  787) Comment with bare http URL with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:220
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  788) Comment with bare http URL with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:220
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  789) Comment with bare http URL with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:220
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  790) Comment with bare email address with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:228
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  791) Comment with bare email address with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:228
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  792) Comment with bare email address with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:228
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  793) Comment with bare email address with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:228
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  794) Comment with bare email address with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:228
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  795) layouts/default.html.erb with theme standard_issue when use_meta_keyword set to true renders assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:21:in `block (5 levels) in <top (required)>'

  796) layouts/default.html.erb with theme standard_issue when use_meta_keyword set to false does not render assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:32:in `block (5 levels) in <top (required)>'

  797) layouts/default.html.erb with theme true-blue-3 when use_meta_keyword set to true renders assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:21:in `block (5 levels) in <top (required)>'

  798) layouts/default.html.erb with theme true-blue-3 when use_meta_keyword set to false does not render assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:32:in `block (5 levels) in <top (required)>'

  799) layouts/default.html.erb with theme typographic when use_meta_keyword set to true renders assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:21:in `block (5 levels) in <top (required)>'

  800) layouts/default.html.erb with theme typographic when use_meta_keyword set to false does not render assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:32:in `block (5 levels) in <top (required)>'

  801) layouts/default.html.erb with theme true-red when use_meta_keyword set to true renders assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:21:in `block (5 levels) in <top (required)>'

  802) layouts/default.html.erb with theme true-red when use_meta_keyword set to false does not render assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:32:in `block (5 levels) in <top (required)>'

  803) layouts/default.html.erb with theme bootstrap when use_meta_keyword set to true renders assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:21:in `block (5 levels) in <top (required)>'

  804) layouts/default.html.erb with theme bootstrap when use_meta_keyword set to false does not render assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:32:in `block (5 levels) in <top (required)>'

  805) layouts/default.html.erb with theme dirtylicious when use_meta_keyword set to true renders assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:21:in `block (5 levels) in <top (required)>'

  806) layouts/default.html.erb with theme dirtylicious when use_meta_keyword set to false does not render assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:32:in `block (5 levels) in <top (required)>'

  807) layouts/default.html.erb with theme scribbish when use_meta_keyword set to true renders assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:21:in `block (5 levels) in <top (required)>'

  808) layouts/default.html.erb with theme scribbish when use_meta_keyword set to false does not render assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:32:in `block (5 levels) in <top (required)>'

Failures:

  1) AccountsController A successful login with 'Remember me' checked should not cause password to change
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:6:in `block (3 levels) in <top (required)>'

  2) AccountsController A successfully authenticated login session gets a user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:16:in `block (3 levels) in <top (required)>'

  3) AccountsController A successfully authenticated login sets typo_user_profile cookie
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:16:in `block (3 levels) in <top (required)>'

  4) AccountsController A successfully authenticated login redirects to /bogus/location
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:16:in `block (3 levels) in <top (required)>'

  5) AccountsController A successfully authenticated login redirects to /admin if no return
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:16:in `block (3 levels) in <top (required)>'

  6) AccountsController A successfully authenticated login redirects to /admin if no return and you are logged in
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:16:in `block (3 levels) in <top (required)>'

  7) AccountsController A successfully authenticated login should redirect to signup if no users
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:16:in `block (3 levels) in <top (required)>'

  8) AccountsController User is inactive no user id goes in the session
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:61:in `block (3 levels) in <top (required)>'

  9) AccountsController User is inactive login should == "inactive"
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:61:in `block (3 levels) in <top (required)>'

  10) AccountsController User is inactive typo_user_profile cookie should be blank
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:61:in `block (3 levels) in <top (required)>'

  11) AccountsController User is inactive should render login action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:61:in `block (3 levels) in <top (required)>'

  12) AccountsController Login with nil user and password should render login action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:94:in `block (3 levels) in <top (required)>'

  13) AccountsController Login gets the wrong password no user in goes in the session
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:110:in `block (3 levels) in <top (required)>'

  14) AccountsController Login gets the wrong password login should == "bob"
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:110:in `block (3 levels) in <top (required)>'

  15) AccountsController Login gets the wrong password typo_user_profile cookie should be blank
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:110:in `block (3 levels) in <top (required)>'

  16) AccountsController Login gets the wrong password should render login action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:110:in `block (3 levels) in <top (required)>'

  17) AccountsController GET /index should redirect to login
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:142:in `block (3 levels) in <top (required)>'

  18) AccountsController GET /index should redirect to signup
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:149:in `block (3 levels) in <top (required)>'

  19) AccountsController GET /login should render action :login
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:158:in `block (3 levels) in <top (required)>'

  20) AccountsController GET /login with 0 existing users should render action :signup
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:168:in `block (3 levels) in <top (required)>'

  21) AccountsController GET /login with 0 existing users should render :signup
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:168:in `block (3 levels) in <top (required)>'

  22) AccountsController with >0 existing user and allow_signup = 0 GET signup should redirect to login
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:186:in `block (3 levels) in <top (required)>'

  23) AccountsController with >0 existing user and allow_signup = 0 POST signup without allow_signup should redirect to login
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:186:in `block (3 levels) in <top (required)>'

  24) AccountsController with > 0 existing user and allow_signup = 1 GET signup with allow_signup should redirect to login
     Failure/Error: @blog = Factory(:blog, :allow_signup => 1)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:207:in `block (3 levels) in <top (required)>'

  25) AccountsController with > 0 existing user and allow_signup = 1 POST signup with allow_signup should redirect to login
     Failure/Error: @blog = Factory(:blog, :allow_signup => 1)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:207:in `block (3 levels) in <top (required)>'

  26) AccountsController GET signup with 0 existing users sets @user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:228:in `block (3 levels) in <top (required)>'

  27) AccountsController GET signup with 0 existing users renders action signup
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:228:in `block (3 levels) in <top (required)>'

  28) AccountsController POST signup with 0 existing users creates and saves a user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:289:in `block (3 levels) in <top (required)>'

  29) AccountsController POST signup with 0 existing users redirects to /account/confirm
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:289:in `block (3 levels) in <top (required)>'

  30) AccountsController POST signup with 0 existing users session gets a user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:289:in `block (3 levels) in <top (required)>'

  31) AccountsController User is logged in trying to log in once again redirects to admin/dashboard/index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:326:in `block (3 levels) in <top (required)>'

  32) AccountsController User is logged in when logging out deletes the session[:user_id]
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:326:in `block (3 levels) in <top (required)>'

  33) AccountsController User is logged in when logging out deletes the session[:user]
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:326:in `block (3 levels) in <top (required)>'

  34) AccountsController User is logged in when logging out redirects to the login action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:326:in `block (3 levels) in <top (required)>'

  35) AccountsController User is logged in when logging out deletes cookies containing credentials
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:326:in `block (3 levels) in <top (required)>'

  36) AccountsController when user has lost their password when GET 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:369:in `block (3 levels) in <top (required)>'

  37) AccountsController when user has lost their password when a known login or email is POSTed 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:369:in `block (3 levels) in <top (required)>'

  38) AccountsController when user has lost their password when an unknown login or email is POSTed 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:369:in `block (3 levels) in <top (required)>'

  39) AccountsController when user has lost their password when an unknown login or email is POSTed should display an error
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:369:in `block (3 levels) in <top (required)>'

  40) Admin::CacheController test_index should render template index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/cache_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  41) Admin::CategoriesController test_index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/categories_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  42) Admin::CategoriesController should create a new category
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/categories_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  43) Admin::CategoriesController test_update
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/categories_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  44) Admin::CategoriesController test_destroy with POST
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/categories_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  45) Admin::CategoriesController should edit an existing category
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/categories_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  46) Admin::CategoriesController test_edit should render template new
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/categories_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  47) Admin::CategoriesController test_edit should have valid category
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/categories_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  48) Admin::CategoriesController test_destroy with GET should render destroy template
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/categories_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  49) Admin::ContentController insert_editor action should render _simple_editor
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:186:in `block (3 levels) in <top (required)>'

  50) Admin::ContentController insert_editor action should render _visual_editor
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:186:in `block (3 levels) in <top (required)>'

  51) Admin::ContentController insert_editor action should render _visual_editor even if editor param is set to unknow editor
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:186:in `block (3 levels) in <top (required)>'

  52) Admin::ContentController with admin connection it should behave like index action should render template index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  53) Admin::ContentController with admin connection it should behave like index action should see all published in index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  54) Admin::ContentController with admin connection it should behave like index action should restrict only by searchstring
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  55) Admin::ContentController with admin connection it should behave like index action should restrict by searchstring and published_at
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  56) Admin::ContentController with admin connection it should behave like index action should restrict to drafts
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  57) Admin::ContentController with admin connection it should behave like index action should restrict to publication pending articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  58) Admin::ContentController with admin connection it should behave like index action should restrict to withdrawn articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  59) Admin::ContentController with admin connection it should behave like index action should restrict to withdrawn articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  60) Admin::ContentController with admin connection it should behave like index action should restrict to published articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  61) Admin::ContentController with admin connection it should behave like index action should fallback to default behavior
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  62) Admin::ContentController with admin connection it should behave like new action should create article with no comments
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  63) Admin::ContentController with admin connection it should behave like new action should create a published article with a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  64) Admin::ContentController with admin connection it should behave like new action should create a draft article without a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  65) Admin::ContentController with admin connection it should behave like new action should create an unpublished article without a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  66) Admin::ContentController with admin connection it should behave like new action should create an article published in the future without a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  67) Admin::ContentController with admin connection it should behave like new action should create article with no pings
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  68) Admin::ContentController with admin connection it should behave like new action should create an article linked to the current user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  69) Admin::ContentController with admin connection it should behave like new action should create new published article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  70) Admin::ContentController with admin connection it should behave like new action should redirect to show
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  71) Admin::ContentController with admin connection it should behave like new action should send notifications on create
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  72) Admin::ContentController with admin connection it should behave like new action should create an article in a category
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  73) Admin::ContentController with admin connection it should behave like new action should create an article with tags
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  74) Admin::ContentController with admin connection it should behave like new action should create article in future
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  75) Admin::ContentController with admin connection it should behave like new action should correctly interpret time zone in :published_at
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  76) Admin::ContentController with admin connection it should behave like new action should respect "GMT+0000 (UTC)" in :published_at
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  77) Admin::ContentController with admin connection it should behave like new action should create a filtered article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  78) Admin::ContentController with admin connection it should behave like new action GET renders the 'new' template
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  79) Admin::ContentController with admin connection it should behave like new action GET correctly converts multi-word tags
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  80) Admin::ContentController with admin connection it should behave like new action publishing a published article with an autosaved draft updates the original
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  81) Admin::ContentController with admin connection it should behave like new action publishing a published article with an autosaved draft deletes the draft
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  82) Admin::ContentController with admin connection it should behave like new action publishing a draft copy of a published article updates the original
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  83) Admin::ContentController with admin connection it should behave like new action publishing a draft copy of a published article deletes the draft
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  84) Admin::ContentController with admin connection it should behave like new action saving a published article as draft leaves the original published
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  85) Admin::ContentController with admin connection it should behave like new action saving a published article as draft leaves the original as is
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  86) Admin::ContentController with admin connection it should behave like new action saving a published article as draft redirects to the index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  87) Admin::ContentController with admin connection it should behave like new action saving a published article as draft creates a draft
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  88) Admin::ContentController with admin connection it should behave like new action with an unrelated draft in the database saving new article as draft leaves the original draft in existence
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  89) Admin::ContentController with admin connection it should behave like destroy action should_not destroy article by get
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy action" called from ./spec/controllers/admin/content_controller_spec.rb:481
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  90) Admin::ContentController with admin connection it should behave like destroy action should destroy article by post
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy action" called from ./spec/controllers/admin/content_controller_spec.rb:481
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  91) Admin::ContentController with admin connection it should behave like autosave action first time for a new article should save new article with draft status and no parent article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "autosave action" called from ./spec/controllers/admin/content_controller_spec.rb:482
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  92) Admin::ContentController with admin connection it should behave like autosave action second time for a new article should save the same article with draft status and no parent article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "autosave action" called from ./spec/controllers/admin/content_controller_spec.rb:482
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  93) Admin::ContentController with admin connection it should behave like autosave action for a published article should create a draft article with proper attributes and existing article as a parent
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "autosave action" called from ./spec/controllers/admin/content_controller_spec.rb:482
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  94) Admin::ContentController with admin connection it should behave like autosave action for a published article should not create another draft article with parent_id if article has already a draft associated
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "autosave action" called from ./spec/controllers/admin/content_controller_spec.rb:482
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  95) Admin::ContentController with admin connection it should behave like autosave action for a published article should create a draft with the same permalink even if the title has changed
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "autosave action" called from ./spec/controllers/admin/content_controller_spec.rb:482
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  96) Admin::ContentController with admin connection it should behave like autosave action with an unrelated draft in the database leaves the original draft in existence
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "autosave action" called from ./spec/controllers/admin/content_controller_spec.rb:482
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  97) Admin::ContentController with admin connection edit action should edit article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  98) Admin::ContentController with admin connection edit action should update article by edit action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  99) Admin::ContentController with admin connection edit action should allow updating body_and_extended
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  100) Admin::ContentController with admin connection edit action should delete draft about this article if update
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  101) Admin::ContentController with admin connection edit action should delete all draft about this article if update not happen but why not
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  102) Admin::ContentController with admin connection resource_add action should add resource
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  103) Admin::ContentController with admin connection resource_remove action should remove resource
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  104) Admin::ContentController with admin connection auto_complete_for_article_keywords action should return foo for keywords fo
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  105) Admin::ContentController with admin connection auto_complete_for_article_keywords action should return nothing for hello
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  106) Admin::ContentController with admin connection auto_complete_for_article_keywords action should return bar and bazz for ba keyword
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  107) Admin::ContentController with publisher connection it should behave like index action should render template index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  108) Admin::ContentController with publisher connection it should behave like index action should see all published in index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  109) Admin::ContentController with publisher connection it should behave like index action should restrict only by searchstring
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  110) Admin::ContentController with publisher connection it should behave like index action should restrict by searchstring and published_at
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  111) Admin::ContentController with publisher connection it should behave like index action should restrict to drafts
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  112) Admin::ContentController with publisher connection it should behave like index action should restrict to publication pending articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  113) Admin::ContentController with publisher connection it should behave like index action should restrict to withdrawn articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  114) Admin::ContentController with publisher connection it should behave like index action should restrict to withdrawn articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  115) Admin::ContentController with publisher connection it should behave like index action should restrict to published articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  116) Admin::ContentController with publisher connection it should behave like index action should fallback to default behavior
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  117) Admin::ContentController with publisher connection it should behave like new action should create article with no comments
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  118) Admin::ContentController with publisher connection it should behave like new action should create a published article with a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  119) Admin::ContentController with publisher connection it should behave like new action should create a draft article without a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  120) Admin::ContentController with publisher connection it should behave like new action should create an unpublished article without a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  121) Admin::ContentController with publisher connection it should behave like new action should create an article published in the future without a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  122) Admin::ContentController with publisher connection it should behave like new action should create article with no pings
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  123) Admin::ContentController with publisher connection it should behave like new action should create an article linked to the current user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  124) Admin::ContentController with publisher connection it should behave like new action should create new published article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  125) Admin::ContentController with publisher connection it should behave like new action should redirect to show
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  126) Admin::ContentController with publisher connection it should behave like new action should send notifications on create
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  127) Admin::ContentController with publisher connection it should behave like new action should create an article in a category
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  128) Admin::ContentController with publisher connection it should behave like new action should create an article with tags
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  129) Admin::ContentController with publisher connection it should behave like new action should create article in future
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  130) Admin::ContentController with publisher connection it should behave like new action should correctly interpret time zone in :published_at
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  131) Admin::ContentController with publisher connection it should behave like new action should respect "GMT+0000 (UTC)" in :published_at
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  132) Admin::ContentController with publisher connection it should behave like new action should create a filtered article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  133) Admin::ContentController with publisher connection it should behave like new action GET renders the 'new' template
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  134) Admin::ContentController with publisher connection it should behave like new action GET correctly converts multi-word tags
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  135) Admin::ContentController with publisher connection it should behave like new action publishing a published article with an autosaved draft updates the original
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  136) Admin::ContentController with publisher connection it should behave like new action publishing a published article with an autosaved draft deletes the draft
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  137) Admin::ContentController with publisher connection it should behave like new action publishing a draft copy of a published article updates the original
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  138) Admin::ContentController with publisher connection it should behave like new action publishing a draft copy of a published article deletes the draft
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  139) Admin::ContentController with publisher connection it should behave like new action saving a published article as draft leaves the original published
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  140) Admin::ContentController with publisher connection it should behave like new action saving a published article as draft leaves the original as is
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  141) Admin::ContentController with publisher connection it should behave like new action saving a published article as draft redirects to the index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  142) Admin::ContentController with publisher connection it should behave like new action saving a published article as draft creates a draft
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  143) Admin::ContentController with publisher connection it should behave like new action with an unrelated draft in the database saving new article as draft leaves the original draft in existence
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  144) Admin::ContentController with publisher connection it should behave like destroy action should_not destroy article by get
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy action" called from ./spec/controllers/admin/content_controller_spec.rb:623
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  145) Admin::ContentController with publisher connection it should behave like destroy action should destroy article by post
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy action" called from ./spec/controllers/admin/content_controller_spec.rb:623
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  146) Admin::ContentController with publisher connection edit action should redirect if edit article doesn't his
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  147) Admin::ContentController with publisher connection edit action should edit article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  148) Admin::ContentController with publisher connection edit action should update article by edit action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  149) Admin::ContentController with publisher connection destroy action can be access should redirect when want destroy article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  150) Admin::DashboardController test index should render the index template
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/dashboard_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  151) Admin::FeedbackController logged in admin user destroy action should destroy feedback from article doesn't own
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  152) Admin::FeedbackController logged in admin user destroy action it should behave like destroy feedback with feedback from own article should destroy feedback
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy feedback with feedback from own article" called from ./spec/controllers/admin/feedback_controller_spec.rb:56
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  153) Admin::FeedbackController logged in admin user destroy action it should behave like destroy feedback with feedback from own article should redirect to feedback from article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy feedback with feedback from own article" called from ./spec/controllers/admin/feedback_controller_spec.rb:56
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  154) Admin::FeedbackController logged in admin user destroy action it should behave like destroy feedback with feedback from own article should not destroy feedback in get request
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy feedback with feedback from own article" called from ./spec/controllers/admin/feedback_controller_spec.rb:56
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  155) Admin::FeedbackController logged in admin user index action should success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  156) Admin::FeedbackController logged in admin user index action should view only unconfirmed feedback
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  157) Admin::FeedbackController logged in admin user index action should view only spam feedback
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  158) Admin::FeedbackController logged in admin user index action should view unconfirmed_spam
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  159) Admin::FeedbackController logged in admin user index action should view presumed_spam
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  160) Admin::FeedbackController logged in admin user index action should view presumed_ham
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  161) Admin::FeedbackController logged in admin user index action should get page 1 if page params empty
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  162) Admin::FeedbackController logged in admin user article action should see all feedback on one article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  163) Admin::FeedbackController logged in admin user article action should see only spam feedback on one article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  164) Admin::FeedbackController logged in admin user article action should see only ham feedback on one article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  165) Admin::FeedbackController logged in admin user article action should redirect_to index if bad article id
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  166) Admin::FeedbackController logged in admin user create action by get access should raise ActiveRecordNotFound if article doesn't exist
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  167) Admin::FeedbackController logged in admin user create action by get access should not create comment
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  168) Admin::FeedbackController logged in admin user create action by post access should raise ActiveRecordNotFound if article doesn't exist
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  169) Admin::FeedbackController logged in admin user create action by post access should create comment
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  170) Admin::FeedbackController logged in admin user create action by post access should create comment mark as ham
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  171) Admin::FeedbackController logged in admin user edit action should render edit form
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  172) Admin::FeedbackController logged in admin user update action should update comment if post request
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  173) Admin::FeedbackController logged in admin user update action should not  update comment if get request
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  174) Admin::FeedbackController publisher access destroy action should not destroy feedback doesn't own
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  175) Admin::FeedbackController publisher access destroy action it should behave like destroy feedback with feedback from own article should destroy feedback
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy feedback with feedback from own article" called from ./spec/controllers/admin/feedback_controller_spec.rb:296
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  176) Admin::FeedbackController publisher access destroy action it should behave like destroy feedback with feedback from own article should redirect to feedback from article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy feedback with feedback from own article" called from ./spec/controllers/admin/feedback_controller_spec.rb:296
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  177) Admin::FeedbackController publisher access destroy action it should behave like destroy feedback with feedback from own article should not destroy feedback in get request
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy feedback with feedback from own article" called from ./spec/controllers/admin/feedback_controller_spec.rb:296
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  178) Admin::FeedbackController publisher access edit action should not edit comment no own article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  179) Admin::FeedbackController publisher access edit action should edit comment if own article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  180) Admin::FeedbackController publisher access update action should update comment if own article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  181) Admin::FeedbackController publisher access update action should not update comment if not own article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  182) Admin::FeedbackController publisher access #bulkops action should redirect to action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  183) Admin::PagesController test_create
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  184) Admin::PagesController test_update
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  185) Admin::PagesController test_destroy
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  186) Admin::PagesController should create a published page with a redirect
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  187) Admin::PagesController should create an unpublished page without a redirect
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  188) Admin::PagesController should create a page published in the future without a redirect
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  189) Admin::PagesController#index should response success
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  190) Admin::PagesController#index should response success with :page args
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  191) Admin::PagesController new without page params should render template new and has a page object
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  192) Admin::PagesController new without page params should assign to current user
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  193) Admin::PagesController new without page params should have a text filter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  194) Admin::PagesController test_edit should render edit template
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  195) Admin::PagesController insert_editor action should render _simple_editor
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  196) Admin::PagesController insert_editor action should render _visual_editor
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  197) Admin::PagesController insert_editor action should render _visual_editor even if editor param is set to unknow editor
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  198) Admin::PostTypesController index shoudld redirect to new
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/post_types_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  199) Admin::PostTypesController test_create
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/post_types_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  200) Admin::PostTypesController test_destroy with POST
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/post_types_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  201) Admin::PostTypesController test_new should render template new
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/post_types_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  202) Admin::PostTypesController test_edit should render template new
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/post_types_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  203) Admin::PostTypesController test_edit test_update
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/post_types_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  204) Admin::PostTypesController test_destroy with GET should render destroy template
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/post_types_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  205) Admin::ProfilesController#index should render index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/profiles_controller_spec.rb:7:in `block (3 levels) in <top (required)>'

  206) Admin::ProfilesController successful POST to index redirects to profile page
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/profiles_controller_spec.rb:20:in `block (3 levels) in <top (required)>'

  207) Admin::RedirectsController test_create
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/redirects_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  208) Admin::RedirectsController test_create with empty from path
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/redirects_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  209) Admin::RedirectsController test_update
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/redirects_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  210) Admin::RedirectsController#index should display index with redirects
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/redirects_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  211) Admin::RedirectsController#edit should render new template with valid redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/redirects_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  212) Admin::RedirectsController test_destroy with GET should render destroy template
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/redirects_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  213) Admin::RedirectsController test_destroy with POST should redirect to index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/redirects_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  214) Admin::RedirectsController test_destroy with POST should have no more redirects
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/redirects_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  215) Admin::ResourcesController test_destroy_image with POST
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/resources_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  216) Admin::ResourcesController test_upload
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/resources_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  217) Admin::ResourcesController test_index should render index template
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/resources_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  218) Admin::ResourcesController test_destroy_image with get should render template destroy
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/resources_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  219) Admin::ResourcesController test_destroy_image with get should have a valid file
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/resources_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  220) Admin::SeoController#index should render index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/seo_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  221) Admin::SeoController#permalinks should render permalinks
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/seo_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  222) Admin::SeoController#titles should render titles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/seo_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  223) Admin::SeoController update action should success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/seo_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  224) Admin::SeoController update action should not save blog with bad permalink format
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/seo_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  225) Admin::SettingsController#index should render index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/settings_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  226) Admin::SettingsController write action should be success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/settings_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  227) Admin::SettingsController feedback action should be sucess
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/settings_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  228) Admin::SettingsController redirect action should be success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/settings_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  229) Admin::SettingsController update action should success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/settings_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  230) Admin::SettingsController update action should not save blog with bad permalink format
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/settings_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  231) Admin::SidebarController rendering test_index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/sidebar_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  232) Admin::TagsController index action should be success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  233) Admin::TagsController index action should render template index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  234) Admin::TagsController edit action should be success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  235) Admin::TagsController edit action should render template edit
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  236) Admin::TagsController edit action should assigns value :tag
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  237) Admin::TagsController destroy action with GET should be success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  238) Admin::TagsController destroy action with GET should have an id in the form destination
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  239) Admin::TagsController destroy action with GET should render template edit
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  240) Admin::TagsController destroy action with GET should assigns value :tag
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  241) Admin::TagsController destroy action with POST should redirect to index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  242) Admin::TagsController destroy action with POST should have one less tags
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  243) Admin::TagsController update action should redirect to index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  244) Admin::TagsController update action should update tag
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  245) Admin::TagsController update action should create a redirect from the old to the new
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  246) Admin::TextfiltersController macro help action should render success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/textfilters_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  247) Admin::ThemesController redirects to :index after the :switchto action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/themes_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  248) Admin::ThemesController returns succes for the :preview action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/themes_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  249) Admin::ThemesController test index assigns @themes for the :index action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/themes_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  250) Admin::UsersController rough port of the old functional test  when you are admin test_index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/users_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  251) Admin::UsersController rough port of the old functional test  when you are admin test_new
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/users_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  252) Admin::UsersController rough port of the old functional test  when you are admin test_destroy
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/users_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  253) Admin::UsersController rough port of the old functional test  when you are admin #EDIT action with POST request should redirect to index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/users_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  254) Admin::UsersController rough port of the old functional test  when you are admin #EDIT action with GET request with no id params it should behave like edit admin render should render template edit
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "edit admin render" called from ./spec/controllers/admin/users_controller_spec.rb:55
     # ./spec/controllers/admin/users_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  255) Admin::UsersController rough port of the old functional test  when you are admin #EDIT action with GET request with no id params it should behave like edit admin render should assigns tobi user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "edit admin render" called from ./spec/controllers/admin/users_controller_spec.rb:55
     # ./spec/controllers/admin/users_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  256) Admin::UsersController rough port of the old functional test  when you are admin #EDIT action with GET request with id params it should behave like edit admin render should render template edit
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "edit admin render" called from ./spec/controllers/admin/users_controller_spec.rb:62
     # ./spec/controllers/admin/users_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  257) Admin::UsersController rough port of the old functional test  when you are admin #EDIT action with GET request with id params it should behave like edit admin render should assigns tobi user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "edit admin render" called from ./spec/controllers/admin/users_controller_spec.rb:62
     # ./spec/controllers/admin/users_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  258) Admin::UsersController rough port of the old functional test when you are not admin don't see the list of user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/users_controller_spec.rb:86:in `block (3 levels) in <top (required)>'

  259) Admin::UsersController rough port of the old functional test when you are not admin EDIT Action try update another user should redirect to login
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/users_controller_spec.rb:86:in `block (3 levels) in <top (required)>'

  260) Admin::UsersController rough port of the old functional test when you are not admin EDIT Action try update another user should not change user profile
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/users_controller_spec.rb:86:in `block (3 levels) in <top (required)>'

  261) ArticlesController should redirect category to /categories
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  262) ArticlesController should redirect tag to /tags
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  263) ArticlesController archives
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  264) ArticlesController index action should be render template index
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  265) ArticlesController index action should show some articles
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  266) ArticlesController index action should have good link feed rss
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  267) ArticlesController index action should have good link feed atom
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  268) ArticlesController index action should have a canonical url
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  269) ArticlesController index action should have googd title
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  270) ArticlesController index action should have a custom tracking field
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  271) ArticlesController#search action should render feed rss by search
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  272) ArticlesController#search action should render feed atom by search
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  273) ArticlesController#search action search with empty result
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  274) ArticlesController#search action a valid search should render template search
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  275) ArticlesController#search action a valid search should assigns articles
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  276) ArticlesController#search action a valid search should have good feed rss link
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  277) ArticlesController#search action a valid search should have good feed atom link
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  278) ArticlesController#search action a valid search should have a canonical url
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  279) ArticlesController#search action a valid search should have a good title
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  280) ArticlesController#search action a valid search should have content markdown interpret and without html tag
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  281) ArticlesController#search action a valid search should have a custom tracking field
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  282) ArticlesController#livesearch action with a query with several words should be valid
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  283) ArticlesController#livesearch action with a query with several words should render without layout
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  284) ArticlesController#livesearch action with a query with several words should render template live_search
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  285) ArticlesController#livesearch action with a query with several words should not have h3 tag
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  286) ArticlesController#livesearch action with a query with several words should assign @search the search string
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  287) ArticlesController index for a month should render template index
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  288) ArticlesController index for a month should contain some articles
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  289) ArticlesController index for a month should have a canonical url
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  290) ArticlesController index for a month should have a good title
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  291) ArticlesController index for a month should have a custom tracking field
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  292) ArticlesController nousers redirects to signup
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:237:in `block (2 levels) in <top (required)>'

  293) ArticlesController feeds /articles.atom => an atom feed
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:252:in `block (2 levels) in <top (required)>'

  294) ArticlesController feeds /articles.rss => an RSS 2.0 feed
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:252:in `block (2 levels) in <top (required)>'

  295) ArticlesController feeds atom feed for archive should be valid
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:252:in `block (2 levels) in <top (required)>'

  296) ArticlesController feeds RSS feed for archive should be valid
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:252:in `block (2 levels) in <top (required)>'

  297) ArticlesController the index should ignore the HTTP Accept: header
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:297:in `block (2 levels) in <top (required)>'

  298) ArticlesController previewing with non logged user should redirect to login
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  299) ArticlesController previewing with logged user should render template /articles/read
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  300) ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/standard_issue/views/articles/read
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  301) ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/true-blue-3/views/articles/read
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  302) ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/typographic/views/articles/read
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  303) ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/true-red/views/articles/read
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  304) ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/bootstrap/views/articles/read
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  305) ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/dirtylicious/views/articles/read
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  306) ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/scribbish/views/articles/read
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  307) ArticlesController previewing with logged user should assigns article define with id
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  308) ArticlesController previewing with logged user should assigns last article with id like parent_id
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  309) ArticlesController redirecting should get good article with utf8 slug
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:447:in `block (2 levels) in <top (required)>'

  310) ArticlesController redirecting should get good article with pre-escaped utf8 slug using unescaped slug
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:456:in `block (2 levels) in <top (required)>'

  311) ArticlesController redirecting with explicit redirects should redirect from known URL
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:365:in `block (3 levels) in <top (required)>'

  312) ArticlesController redirecting with explicit redirects should not redirect from unknown URL
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:386:in `block (3 levels) in <top (required)>'

  313) ArticlesController redirecting with explicit redirects and non-empty relative_url_root should redirect
     Failure/Error: b = Factory(:blog, :base_url => "http://test.host/blog")
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:404:in `block (4 levels) in <top (required)>'

  314) ArticlesController redirecting with explicit redirects and non-empty relative_url_root should redirect if to_path includes relative_url_root
     Failure/Error: b = Factory(:blog, :base_url => "http://test.host/blog")
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:404:in `block (4 levels) in <top (required)>'

  315) ArticlesController redirecting with explicit redirects and non-empty relative_url_root should ignore the blog base_url if the to_path is a full uri
     Failure/Error: b = Factory(:blog, :base_url => "http://test.host/blog")
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:404:in `block (4 levels) in <top (required)>'

  316) ArticlesController redirecting accessing old-style URL with "articles" as the first part should redirect to article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:465:in `block (3 levels) in <top (required)>'

  317) ArticlesController redirecting accessing old-style URL with "articles" as the first part should redirect to article with url_root
     Failure/Error: b = Factory(:blog, :base_url => "http://test.host/blog")
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:476:in `block (3 levels) in <top (required)>'

  318) ArticlesController redirecting accessing old-style URL with "articles" as the first part should redirect to article with articles in url_root
     Failure/Error: b = Factory(:blog, :base_url => "http://test.host/aaa/articles/bbb")
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:487:in `block (3 levels) in <top (required)>'

  319) ArticlesController redirecting with permalink_format like %title%.html accessing various non-matching URLs should not find '.htmlsecond-blog-article'
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  320) ArticlesController redirecting with permalink_format like %title%.html accessing various non-matching URLs should not find 'second-blog-article.html.html'
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  321) ArticlesController redirecting with permalink_format like %title%.html accessing various non-matching URLs should not find 'second-blog-article.html/foo'
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  322) ArticlesController redirecting with permalink_format like %title%.html accessing legacy URLs should redirect from default URL format
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  323) ArticlesController redirecting with permalink_format like %title%.html accessing legacy URLs should redirect from old-style URL format with "articles" part
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  324) ArticlesController redirecting with permalink_format like %title%.html accessing an article should render template read to article
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  325) ArticlesController redirecting with permalink_format like %title%.html accessing an article should assign article1 to @article
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  326) ArticlesController redirecting with permalink_format like %title%.html accessing an article the resulting page should have good rss feed link
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  327) ArticlesController redirecting with permalink_format like %title%.html accessing an article the resulting page should have good atom feed link
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  328) ArticlesController redirecting with permalink_format like %title%.html accessing an article the resulting page should have a canonical url
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  329) ArticlesController redirecting with permalink_format like %title%.html accessing an article the resulting page should have a good title
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  330) ArticlesController redirecting with permalink_format like %title%.html rendering as atom feed should render feedback atom feed
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  331) ArticlesController redirecting with permalink_format like %title%.html rendering as rss feed should render rss20 partial
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  332) ArticlesController redirecting with a format containing a fixed component should find the article if the url matches all components
     Failure/Error: b = Factory(:blog, :permalink_format => '/foo/%title%')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:607:in `block (3 levels) in <top (required)>'

  333) ArticlesController redirecting with a format containing a fixed component should not find the article if the url does not match the fixed component
     Failure/Error: b = Factory(:blog, :permalink_format => '/foo/%title%')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:607:in `block (3 levels) in <top (required)>'

  334) ArticlesController redirecting with a custom format with several fixed parts and several variables should find the article if the url matches all components
     Failure/Error: b = Factory(:blog, :permalink_format => '/foo/bar/%year%/%month%/%title%')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:625:in `block (3 levels) in <top (required)>'

  335) ArticlesController redirecting with a custom format with several fixed parts and several variables should not find the article if the url only matches some components
     Failure/Error: b = Factory(:blog, :permalink_format => '/foo/bar/%year%/%month%/%title%')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:625:in `block (3 levels) in <top (required)>'

  336) ArticlesController password protected article alone should be password protected
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:660:in `block (2 levels) in <top (required)>'

  337) ArticlesController password protected #check_password shows article when given correct password
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:660:in `block (2 levels) in <top (required)>'

  338) ArticlesController password protected #check_password shows password form when given incorrect password
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:660:in `block (2 levels) in <top (required)>'

  339) ArticlesController assigned keywords article with categories should have meta keywords
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:684:in `block (2 levels) in <top (required)>'

  340) ArticlesController assigned keywords article with neither categories nor tags should not have meta keywords
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:684:in `block (2 levels) in <top (required)>'

  341) ArticlesController assigned keywords index without option and no blog keywords should not have meta keywords
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:684:in `block (2 levels) in <top (required)>'

  342) ArticlesController assigned keywords index without option but with blog keywords should have meta keywords
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:684:in `block (2 levels) in <top (required)>'

  343) AuthorsController#show as html renders the :show template
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  344) AuthorsController#show as html assigns author
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  345) AuthorsController#show as html assigns articles as published articles
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  346) AuthorsController#show as html when rendered has a link to the rss feed
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  347) AuthorsController#show as html when rendered has a link to the atom feed
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  348) AuthorsController#show as an atom feed assigns articles as published articles
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  349) AuthorsController#show as an atom feed renders the atom template
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  350) AuthorsController#show as an atom feed does not render layout
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  351) AuthorsController#show as an rss feed assigns articles as published articles
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  352) AuthorsController#show as an rss feed renders the rss template
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  353) AuthorsController#show as an rss feed does not render layout
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  354) AuthorsController SEO options should never have meta keywords with deactivated option
     Failure/Error: Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:84:in `block (2 levels) in <top (required)>'

  355) AuthorsController SEO options should never have meta keywords with deactivated option
     Failure/Error: Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:91:in `block (2 levels) in <top (required)>'

  356) BackendController when called through Blogger API test_blogger_delete_post
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  357) BackendController when called through Blogger API test_blogger_get_users_blogs
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  358) BackendController when called through Blogger API test_blogger_get_user_info
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  359) BackendController when called through Blogger API test_blogger_new_post
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  360) BackendController when called through Blogger API test_blogger_new_post_no_title
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  361) BackendController when called through Blogger API test_blogger_new_post_with_categories
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  362) BackendController when called through Blogger API test_blogger_new_post_with_non_existing_categories
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  363) BackendController when called through Blogger API test_blogger_fail_authentication
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  364) BackendController when called through the MetaWeblog API test_meta_weblog_get_categories
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  365) BackendController when called through the MetaWeblog API test_meta_weblog_get_post
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  366) BackendController when called through the MetaWeblog API test_meta_weblog_get_recent_posts
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  367) BackendController when called through the MetaWeblog API test_meta_weblog_delete_post
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  368) BackendController when called through the MetaWeblog API test_meta_weblog_new_post_fails
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  369) BackendController when called through the MetaWeblog API test_meta_weblog_new_post
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  370) BackendController when called through the MetaWeblog API test_meta_weblog_new_unpublished_post_with_blank_creation_date
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  371) BackendController when called through the MetaWeblog API should set categories if specified in new post
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  372) BackendController when called through the MetaWeblog API test_meta_weblog_edit_unpublished_post_with_old_creation_date
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  373) BackendController when called through the MetaWeblog API test_meta_weblog_new_media_object
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  374) BackendController when called through the MetaWeblog API test_meta_weblog_fail_authentication
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  375) BackendController when called through the MetaWeblog API test_meta_weblog_should_preserve_date_time_on_roundtrip_edit
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  376) BackendController when called through the MetaWeblog API when editing a post test_meta_weblog_edit_post
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  377) BackendController when called through the MetaWeblog API when editing a post should set categories if specified
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  378) BackendController when called through the Movable Type API test_mt_get_category_list
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  379) BackendController when called through the Movable Type API test_mt_get_post_categories
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  380) BackendController when called through the Movable Type API test_mt_get_recent_post_titles
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  381) BackendController when called through the Movable Type API test_mt_set_post_categories
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  382) BackendController when called through the Movable Type API test_mt_supported_text_filters
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  383) BackendController when called through the Movable Type API test_mt_supported_methods
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  384) BackendController when called through the Movable Type API test_mt_get_trackback_pings
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  385) BackendController when called through the Movable Type API should publish post
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  386) BackendController when called through the Movable Type API test_mt_fail_authentication
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  387) CategoriesController /index normally 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  388) CategoriesController /index normally 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  389) CategoriesController /index normally 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  390) CategoriesController /index normally when rendered 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  391) CategoriesController /index if :index template exists should render :index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  392) CategoriesController#show should be successful
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  393) CategoriesController#show should render :show by default
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  394) CategoriesController#show should fall back to rendering articles/index
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  395) CategoriesController#show should render personal when template exists
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  396) CategoriesController#show should show only published articles
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  397) CategoriesController#show should set the page title to "Category Personal"
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  398) CategoriesController#show should render the atom feed for /articles/category/personal.atom
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  399) CategoriesController#show should render the rss feed for /articles/category/personal.rss
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  400) CategoriesController#show when rendered should have a canonical URL
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  401) CategoriesController empty category life-on-mars should redirect to home when the category is empty
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:136:in `block (2 levels) in <top (required)>'

  402) CategoriesController password protected article should be password protected when shown in category
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:148:in `block (2 levels) in <top (required)>'

  403) CategoriesController SEO Options category without meta keywords and activated options (use_meta_keyword ON) should not have meta keywords
     Failure/Error: Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:164:in `block (2 levels) in <top (required)>'

  404) CategoriesController SEO Options category with keywords and activated option (use_meta_keyword ON) should have meta keywords
     Failure/Error: Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:172:in `block (2 levels) in <top (required)>'

  405) CategoriesController SEO Options category with meta keywords and deactivated options (use_meta_keyword off) should not have meta keywords
     Failure/Error: Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:177:in `block (2 levels) in <top (required)>'

  406) CategoriesController SEO Options with unindex_categories (set ON), should have rel nofollow
     Failure/Error: Factory(:blog, :unindex_categories => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:182:in `block (2 levels) in <top (required)>'

  407) CategoriesController SEO Options without unindex_categories (set OFF), should not have rel nofollow
     Failure/Error: Factory(:blog, :unindex_categories => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:187:in `block (2 levels) in <top (required)>'

  408) CommentsController#create should redirect to the article
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  409) CommentsController#create Basic comment creation should assign the new comment to @comment
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  410) CommentsController#create Basic comment creation should assign the article to @article
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  411) CommentsController#create Basic comment creation should save the comment
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  412) CommentsController#create Basic comment creation should set the author
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  413) CommentsController#create Basic comment creation should set an author cookie
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  414) CommentsController#create Basic comment creation should set a gravatar_id cookie
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  415) CommentsController#create Basic comment creation should set a url cookie
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  416) CommentsController AJAX creation should render the comment partial
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  417) CommentsController#index scoped index GET 2007/10/11/slug/comments should redirect to /2007/10/11/slug#comments
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  418) CommentsController#index without format should be successful
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  419) CommentsController#index without format should not bother fetching any comments 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  420) CommentsController#index with :format => 'atom' without article is succesful
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  421) CommentsController#index with :format => 'atom' without article passes the comments to the template
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  422) CommentsController#index with :format => 'atom' without article should return an atom feed
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  423) CommentsController#index with :format => 'atom' with an article should return an atom feed
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  424) CommentsController#index with :format => 'rss' without article is succesful
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  425) CommentsController#index with :format => 'rss' without article passes the comments to the template
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  426) CommentsController#index with :format => 'rss' without article should return an rss feed
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  427) CommentsController#index with :format => 'rss' with article should return an rss feed
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  428) GroupingController should set meta robots to noindex follow when tag controller and unindex_tags options is true
     Failure/Error: Factory(:blog, :unindex_tags => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/grouping_controller_spec.rb:7:in `block (3 levels) in <top (required)>'

  429) GroupingController should set meta robots to noindex follow when category controller and unindex_categories optinos is true
     Failure/Error: Factory(:blog, :unindex_categories => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/grouping_controller_spec.rb:12:in `block (3 levels) in <top (required)>'

  430) GroupingController should set meta robots to noindex follow when page params not blank and unindex_tags and unindex_categories are set to false
     Failure/Error: Factory(:blog, :unindex_categories => false, :unindex_tags => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/grouping_controller_spec.rb:17:in `block (3 levels) in <top (required)>'

  431) GroupingController should not set meta robots to noindex follow when tag controller and unindex_tags options is false and page params nil
     Failure/Error: Factory(:blog, :unindex_tags => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/grouping_controller_spec.rb:24:in `block (3 levels) in <top (required)>'

  432) GroupingController should not set meta robots to noindex follow when categoriy controller and unindex_categories options is false and page params nil
     Failure/Error: Factory(:blog, :unindex_categories => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/grouping_controller_spec.rb:29:in `block (3 levels) in <top (required)>'

  433) SetupController when a blog is configured and has some users GET setup 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/setup_controller_spec.rb:62:in `block (4 levels) in <top (required)>'

  434) SetupController when a blog is configured and has some users POST setup 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/setup_controller_spec.rb:71:in `block (4 levels) in <top (required)>'

  435) SetupController when a blog is configured and has some users POST setup should not initialize blog and users
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/setup_controller_spec.rb:71:in `block (4 levels) in <top (required)>'

  436) TagsController /index normally 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  437) TagsController /index normally 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  438) TagsController /index normally 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  439) TagsController /index normally 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  440) TagsController /index if :index template exists should render :index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  441) TagsController showing a single tag with some articles should be successful
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:36:in `block (2 levels) in <top (required)>'

  442) TagsController showing a single tag with some articles should retrieve the correct set of articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:36:in `block (2 levels) in <top (required)>'

  443) TagsController showing a single tag with some articles should render :show by default
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:36:in `block (2 levels) in <top (required)>'

  444) TagsController showing a single tag with some articles should fall back to rendering articles/index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:36:in `block (2 levels) in <top (required)>'

  445) TagsController showing a single tag with some articles should set the page title to "Tag foo"
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:36:in `block (2 levels) in <top (required)>'

  446) TagsController showing a single tag with some articles should render the atom feed for /articles/tag/foo.atom
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:36:in `block (2 levels) in <top (required)>'

  447) TagsController showing a single tag with some articles should render the rss feed for /articles/tag/foo.rss
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:36:in `block (2 levels) in <top (required)>'

  448) TagsController showing a single tag without articles should redirect to main page
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:36:in `block (2 levels) in <top (required)>'

  449) TagsController showing tag "foo" should have good rss feed link in head
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:108:in `block (2 levels) in <top (required)>'

  450) TagsController showing tag "foo" should have good atom feed link in head
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:108:in `block (2 levels) in <top (required)>'

  451) TagsController showing tag "foo" should have a canonical URL
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:108:in `block (2 levels) in <top (required)>'

  452) TagsController showing a non-existant tag should redirect to main page
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:130:in `block (2 levels) in <top (required)>'

  453) TagsController password protected article article in tag should be password protected
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:142:in `block (2 levels) in <top (required)>'

  454) TagsController SEO Options should have rel nofollow
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:156:in `block (2 levels) in <top (required)>'

  455) TagsController SEO Options should not have rel nofollow
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:156:in `block (2 levels) in <top (required)>'

  456) TagsController SEO Options should not have meta keywords with deactivated option and no blog keywords
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:156:in `block (2 levels) in <top (required)>'

  457) TagsController SEO Options should not have meta keywords with deactivated option and blog keywords
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:156:in `block (2 levels) in <top (required)>'

  458) TagsController SEO Options should not have meta keywords with activated option and no blog keywords
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:156:in `block (2 levels) in <top (required)>'

  459) TagsController SEO Options should have meta keywords with activated option and blog keywords
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:156:in `block (2 levels) in <top (required)>'

  460) ThemeController test_stylesheets
     Failure/Error: before(:each) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/theme_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  461) ThemeController test_images
     Failure/Error: before(:each) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/theme_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  462) ThemeController test_malicious_path
     Failure/Error: before(:each) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/theme_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  463) ThemeController test_view_theming
     Failure/Error: before(:each) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/theme_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  464) ApplicationHelper#render_flash should render empty string if no flash
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  465) ApplicationHelper#render_flash should render a good render if only one notice
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  466) ApplicationHelper#render_flash should render the notice and error flash
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  467) ApplicationHelper#link_to_permalink for a simple ascii-only permalink 
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  468) ApplicationHelper#link_to_permalink for a simple ascii-only permalink 
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  469) ApplicationHelper#link_to_permalink for a multibyte permalink escapes the multibyte characters
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  470) ApplicationHelper#display_date should return date with format %d/%m/%y
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  471) ApplicationHelper#display_date should return date with format %m/%m/%y
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  472) ApplicationHelper#display_date should return date with format %d %b %Y
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  473) ApplicationHelper#display_date should return date with format %b %d %Y
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  474) ApplicationHelper#display_date should return time with format %I:%M%p
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  475) ApplicationHelper#display_date should return time with format %H:%M
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  476) ApplicationHelper#display_date should return time with format %Hh%M
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  477) SidebarHelper#render_sidebars with an invalid sidebar should return a friendly error message
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/sidebar_helper_spec.rb:13:in `block (2 levels) in <top (required)>'

  478) SidebarHelper#render_sidebars with a valid sidebar should render the sidebar
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/sidebar_helper_spec.rb:13:in `block (2 levels) in <top (required)>'

  479) CommentClosing from Test::Unit; no I don't know why it's in article_closing_spec.rb test_new_article_should_be_open_if_auto_close_is_zero
     Failure/Error: @blog = Factory(:blog,
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/article_closing_spec.rb:9:in `block (2 levels) in <top (required)>'

  480) CommentClosing from Test::Unit; no I don't know why it's in article_closing_spec.rb test_old_article_should_be_open_if_auto_close_is_zero
     Failure/Error: @blog = Factory(:blog,
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/article_closing_spec.rb:9:in `block (2 levels) in <top (required)>'

  481) CommentClosing from Test::Unit; no I don't know why it's in article_closing_spec.rb test_new_article_should_be_open_if_auto_close_is_thirty
     Failure/Error: @blog = Factory(:blog,
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/article_closing_spec.rb:9:in `block (2 levels) in <top (required)>'

  482) CommentClosing from Test::Unit; no I don't know why it's in article_closing_spec.rb test_old_article_should_be_closed_if_auto_close_is_thirty
     Failure/Error: @blog = Factory(:blog,
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/article_closing_spec.rb:9:in `block (2 levels) in <top (required)>'

  483) Article test_find_published
     Failure/Error: assert_equal 1, @articles.size
     MiniTest::Assertion:
       <1> expected but was
       <2>.
     # ./spec/models/article_spec.rb:256:in `block (2 levels) in <top (required)>'

  484) Article#search with several words and no result should be empty
     Failure/Error: @articles.should be_empty
       expected empty? to return true, got false
     # ./spec/models/article_spec.rb:427:in `block (4 levels) in <top (required)>'

  485) The first blog should be the only blog allowed
     Failure/Error: @blog = Factory.create :blog
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/blog_spec.rb:53:in `block (2 levels) in <top (required)>'

  486) The default blog should pick up updates after a cache clear
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/blog_spec.rb:63:in `block (2 levels) in <top (required)>'

  487) Given no blogs, a new default blog should be valid after filling the title
     Failure/Error: @blog.should be_valid
       expected #<Blog id: nil, settings: {"blog_name"=>"something not empty"}, base_url: nil> to be valid, but got errors: There can only be one...
     # ./spec/models/blog_spec.rb:79:in `block (2 levels) in <top (required)>'

  488) Given no blogs, a new default blog should be valid without filling the title
     Failure/Error: @blog.should be_valid
       expected #<Blog id: nil, settings: {}, base_url: nil> to be valid, but got errors: There can only be one...
     # ./spec/models/blog_spec.rb:84:in `block (2 levels) in <top (required)>'

  489) Valid permalink in blog should be valid with only %title%
     Failure/Error: @blog.should be_valid
       expected #<Blog id: nil, settings: {"permalink_format"=>"%title%"}, base_url: nil> to be valid, but got errors: There can only be one...
     # ./spec/models/blog_spec.rb:114:in `block (3 levels) in <top (required)>'

  490) Valid permalink in blog should be valid with only %title%.html
     Failure/Error: @blog.should be_valid
       expected #<Blog id: nil, settings: {"permalink_format"=>"%title%.html"}, base_url: nil> to be valid, but got errors: There can only be one...
     # ./spec/models/blog_spec.rb:114:in `block (3 levels) in <top (required)>'

  491) Valid permalink in blog should be valid with only /hello/all/%year%/%title%
     Failure/Error: @blog.should be_valid
       expected #<Blog id: nil, settings: {"permalink_format"=>"/hello/all/%year%/%title%"}, base_url: nil> to be valid, but got errors: There can only be one...
     # ./spec/models/blog_spec.rb:114:in `block (3 levels) in <top (required)>'

  492) Valid permalink in blog should be valid with only atom/%title%.html
     Failure/Error: @blog.should be_valid
       expected #<Blog id: nil, settings: {"permalink_format"=>"atom/%title%.html"}, base_url: nil> to be valid, but got errors: There can only be one...
     # ./spec/models/blog_spec.rb:114:in `block (3 levels) in <top (required)>'

  493) Valid permalink in blog should be valid with only ok/rss/%title%.html
     Failure/Error: @blog.should be_valid
       expected #<Blog id: nil, settings: {"permalink_format"=>"ok/rss/%title%.html"}, base_url: nil> to be valid, but got errors: There can only be one...
     # ./spec/models/blog_spec.rb:114:in `block (3 levels) in <top (required)>'

  494) Given a published article An unchanged article does not invalidate the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:5:in `block (2 levels) in <top (required)>'

  495) Given a published article changing the body smashes the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:5:in `block (2 levels) in <top (required)>'

  496) Given a published article withdrawing it smashes the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:5:in `block (2 levels) in <top (required)>'

  497) Given a published article destroying it smashes the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:5:in `block (2 levels) in <top (required)>'

  498) Given a published article withdrawing, then destroying it smashes the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:5:in `block (2 levels) in <top (required)>'

  499) Given an unpublished article publishing smashes the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:38:in `block (2 levels) in <top (required)>'

  500) Given an unpublished article changing it keeps the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:38:in `block (2 levels) in <top (required)>'

  501) Given an unpublished article destroying it keeps the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:38:in `block (2 levels) in <top (required)>'

  502) Given an unpublished spammy comment changing it does not alter the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:60:in `block (2 levels) in <top (required)>'

  503) Given an unpublished spammy comment publishing it does alter the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:60:in `block (2 levels) in <top (required)>'

  504) Given an unpublished spammy comment destroying it does not alter the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:60:in `block (2 levels) in <top (required)>'

  505) Given a published comment changing it destroys the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:88:in `block (2 levels) in <top (required)>'

  506) Given a published comment unpublishing it destroys the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:88:in `block (2 levels) in <top (required)>'

  507) Given a published comment destroying it destroys the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:88:in `block (2 levels) in <top (required)>'

  508) Given an unpublished spammy trackback changing it does not alter the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:111:in `block (2 levels) in <top (required)>'

  509) Given an unpublished spammy trackback publishing it does alter the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:111:in `block (2 levels) in <top (required)>'

  510) Given an unpublished spammy trackback destroying it does not alter the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:111:in `block (2 levels) in <top (required)>'

  511) Given a published trackback changing it destroys the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:137:in `block (2 levels) in <top (required)>'

  512) Given a published trackback unpublishing it destroys the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:137:in `block (2 levels) in <top (required)>'

  513) Given a published trackback destroying it destroys the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:137:in `block (2 levels) in <top (required)>'

  514) Category should know published_articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/category_spec.rb:19:in `block (2 levels) in <top (required)>'

  515) Category empty permalink should be converted
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/category_spec.rb:28:in `block (2 levels) in <top (required)>'

  516) Category category with permalink should not have permalink generated
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/category_spec.rb:34:in `block (2 levels) in <top (required)>'

  517) Category permalink 
     Failure/Error: before(:each) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/category_spec.rb:43:in `block (3 levels) in <top (required)>'

  518) Comment should have good default filter
     Failure/Error: Factory(:blog, :comment_text_filter => Factory(:markdown))
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:230:in `block (2 levels) in <top (required)>'

  519) Comment#permalink_url should render permalink to comment in public part
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:17:in `block (3 levels) in <top (required)>'

  520) Comment#edit_url should get a url where edit comment in admin
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:32:in `block (3 levels) in <top (required)>'

  521) Comment#delete_url should get the delete url of comment in admin part
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:40:in `block (3 levels) in <top (required)>'

  522) Comment#save should save good comment
     Failure/Error: before(:each) { Factory(:blog, :sp_article_auto_close => 300) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:47:in `block (3 levels) in <top (required)>'

  523) Comment#save should save spam comment
     Failure/Error: before(:each) { Factory(:blog, :sp_article_auto_close => 300) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:47:in `block (3 levels) in <top (required)>'

  524) Comment#save should not save in invalid article
     Failure/Error: before(:each) { Factory(:blog, :sp_article_auto_close => 300) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:47:in `block (3 levels) in <top (required)>'

  525) Comment#save should change old comment
     Failure/Error: before(:each) { Factory(:blog, :sp_article_auto_close => 300) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:47:in `block (3 levels) in <top (required)>'

  526) Comment#save should save a valid comment
     Failure/Error: before(:each) { Factory(:blog, :sp_article_auto_close => 300) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:47:in `block (3 levels) in <top (required)>'

  527) Comment#save should not save with article not allow comment
     Failure/Error: before(:each) { Factory(:blog, :sp_article_auto_close => 300) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:47:in `block (3 levels) in <top (required)>'

  528) Comment#create should create comment
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:95:in `block (3 levels) in <top (required)>'

  529) Comment#create preserves urls starting with https://
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:95:in `block (3 levels) in <top (required)>'

  530) Comment#create preserves urls starting with http://
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:95:in `block (3 levels) in <top (required)>'

  531) Comment#create prepends http:// to urls without protocol
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:95:in `block (3 levels) in <top (required)>'

  532) Comment#spam? should reject spam rbl
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:125:in `block (3 levels) in <top (required)>'

  533) Comment#spam? should not define spam a comment rbl with lookup succeeds
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:125:in `block (3 levels) in <top (required)>'

  534) Comment#spam? should reject spam with uri limit
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:125:in `block (3 levels) in <top (required)>'

  535) Comment reject xss should reject with filter ''
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:166:in `block (3 levels) in <top (required)>'

  536) Comment reject xss should reject with filter 'textile'
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:166:in `block (3 levels) in <top (required)>'

  537) Comment reject xss should reject with filter 'markdown'
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:166:in `block (3 levels) in <top (required)>'

  538) Comment reject xss should reject with filter 'smartypants'
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:166:in `block (3 levels) in <top (required)>'

  539) Comment reject xss should reject with filter 'markdown smartypants'
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:166:in `block (3 levels) in <top (required)>'

  540) Comment change state should becomes withdraw
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:187:in `block (3 levels) in <top (required)>'

  541) Comment change state should becomes not published in article if withdraw
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:187:in `block (3 levels) in <top (required)>'

  542) Comment change state should becomes confirmed if withdrawn
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:187:in `block (3 levels) in <top (required)>'

  543) Comment with feedback moderation enabled should save comment as presumably spam
     Failure/Error: @blog = Factory(:blog,
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:237:in `block (3 levels) in <top (required)>'

  544) Comment with feedback moderation enabled should save comment as confirmed ham
     Failure/Error: @blog = Factory(:blog,
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:237:in `block (3 levels) in <top (required)>'

  545) FeedbackStates from Test::Unit test_ham_all_the_way
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/content_state/feedback_states_spec.rb:5:in `block (2 levels) in <top (required)>'

  546) FeedbackStates from Test::Unit test_spam_all_the_way
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/content_state/feedback_states_spec.rb:5:in `block (2 levels) in <top (required)>'

  547) FeedbackStates from Test::Unit test_presumed_spam_marked_as_ham
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/content_state/feedback_states_spec.rb:5:in `block (2 levels) in <top (required)>'

  548) FeedbackStates from Test::Unit test_presumed_ham_marked_as_spam
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/content_state/feedback_states_spec.rb:5:in `block (2 levels) in <top (required)>'

  549) Testing redirects a new published page gets a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/page_spec.rb:14:in `block (2 levels) in <top (required)>'

  550) Testing redirects a new unpublished page should not get a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/page_spec.rb:22:in `block (2 levels) in <top (required)>'

  551) Testing redirects Changin a published article permalink url should only change the to redirection
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/page_spec.rb:29:in `block (2 levels) in <top (required)>'

  552) Given the fixture :first_page Pages cannot have the same name
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/page_spec.rb:46:in `block (2 levels) in <top (required)>'

  553) Given the fixture :first_page should give a sanitized title
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/page_spec.rb:46:in `block (2 levels) in <top (required)>'

  554) Given the fixture :first_page #permalink_url 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/page_spec.rb:46:in `block (2 levels) in <top (required)>'

  555) Given a valid page default filter should be fetched from the blog
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/page_spec.rb:123:in `block (2 levels) in <top (required)>'

  556) Ping::Pinger with Test::Unit test_pingback_url_nil
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_pinger_spec.rb:5:in `block (2 levels) in <top (required)>'

  557) Ping::Pinger with Test::Unit test_pingback_url_from_body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_pinger_spec.rb:5:in `block (2 levels) in <top (required)>'

  558) Ping::Pinger with Test::Unit test_pingback_url
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_pinger_spec.rb:5:in `block (2 levels) in <top (required)>'

  559) Given a post which references a pingback enabled article Pingback sent to url found in referenced header
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_spec.rb:16:in `block (2 levels) in <top (required)>'

  560) Given a post which references a pingback enabled article Pingback sent to url found in referenced body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_spec.rb:23:in `block (2 levels) in <top (required)>'

  561) Given a post which references a pingback enabled article Pingback sent when new article is saved
     Failure/Error: Factory(:blog, :send_outbound_pings => 1)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_spec.rb:35:in `block (2 levels) in <top (required)>'

  562) An article links to another article, which contains a trackback URL Trackback URL is detected and pinged
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_spec.rb:76:in `block (2 levels) in <top (required)>'

  563) An article links to another article, which contains a trackback URL sends a trackback without html tag in excerpt
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_spec.rb:76:in `block (2 levels) in <top (required)>'

  564) An article links to another article, which contains a trackback URL sends a trackback without markdown tag in excerpt
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_spec.rb:76:in `block (2 levels) in <top (required)>'

  565) Given a remote site to notify, eg technorati we can ping them correctly
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_spec.rb:150:in `block (2 levels) in <top (required)>'

  566) PostType post types are unique
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/post_type_spec.rb:6:in `block (2 levels) in <top (required)>'

  567) PostType Given a new post type should give a valid post type
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/post_type_spec.rb:6:in `block (2 levels) in <top (required)>'

  568) PostType Given a new post type should have a sanitized permalink
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/post_type_spec.rb:6:in `block (2 levels) in <top (required)>'

  569) PostType Given a new post type should have a sanitized permalink with a
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/post_type_spec.rb:6:in `block (2 levels) in <top (required)>'

  570) Sidebar#find_all_visible returns only the sidebar with active position
     Failure/Error: sidebars.size.should == 1
       expected: 1
            got: 6 (using ==)
     # ./spec/models/sidebar_spec.rb:18:in `block (3 levels) in <top (required)>'

  571) Tag we can Tag.get by name
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/tag_spec.rb:5:in `block (2 levels) in <top (required)>'

  572) Tag tags are unique
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/tag_spec.rb:5:in `block (2 levels) in <top (required)>'

  573) Tag display names with spaces can be found by dash joined name
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/tag_spec.rb:5:in `block (2 levels) in <top (required)>'

  574) Tag articles can be tagged
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/tag_spec.rb:5:in `block (2 levels) in <top (required)>'

  575) Tag find_all_with_article_counters finds 2 tags
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/tag_spec.rb:5:in `block (2 levels) in <top (required)>'

  576) Tag permalink_url should be of form /tag/<name>
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/tag_spec.rb:5:in `block (2 levels) in <top (required)>'

  577) Tag#published_articles should return only published articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/tag_spec.rb:5:in `block (2 levels) in <top (required)>'

  578) With the list of available filters #filter text by name
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  579) With the list of available filters #available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  580) With the list of available filters #available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  581) With the list of available filters #available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  582) With the list of available filters #available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  583) With the list of available filters #available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  584) With the list of available filters #available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  585) With the list of available filters #available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  586) With the list of available filters #available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  587) With the list of available filters #available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  588) With the list of available filters #macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  589) With the list of available filters #macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  590) With the list of available filters #macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  591) With the list of available filters #macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  592) With the list of available filters #macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  593) With the list of available filters #macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  594) With the list of available filters #macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  595) With the list of available filters #macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  596) With the list of available filters #macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  597) With the list of available filters #filter_text unknown
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  598) With the list of available filters #filter_text smartypants
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  599) With the list of available filters #filter_text markdown
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  600) With the list of available filters #filter_text filterchain
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  601) With the list of available filters #filter_text test_code_plus_markup_chain
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  602) With the list of available filters #filter_text specific typo tags flickr should show with default settings
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  603) With the list of available filters #filter_text specific typo tags flickr should use default image size
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  604) With the list of available filters #filter_text specific typo tags flickr should use caption
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  605) With the list of available filters #filter_text specific typo tags flickr broken_flickr_link
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  606) With the list of available filters #filter_text code textfilter single line should made nothin if no args
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  607) With the list of available filters #filter_text code textfilter single line should parse ruby lang
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  608) With the list of available filters #filter_text code textfilter single line should parse ruby and xml in same sentence but not in same place
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  609) With the list of available filters #filter_text code textfilter multiline should render ruby
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  610) With the list of available filters #filter_text lightbox should work
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  611) With the list of available filters #filter_text lightbox shoudl use default thumb image size
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  612) With the list of available filters #filter_text lightbox should use default display image size
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  613) With the list of available filters #filter_text lightbox should work with caption
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  614) With the list of available filters #filter_text combining a post-macro with markdown correctly interprets the macro
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  615) With the list of available filters #filter_text combining a post-macro with markdown correctly interprets the macro
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  616) Given the default theme theme should be typographic
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/theme_spec.rb:12:in `block (2 levels) in <top (required)>'

  617) Given the default theme theme description should be correct
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/theme_spec.rb:12:in `block (2 levels) in <top (required)>'

  618) Given the default theme theme_from_path should find the correct theme
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/theme_spec.rb:12:in `block (2 levels) in <top (required)>'

  619) Given the default theme #search_theme_path finds the right things 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/theme_spec.rb:12:in `block (2 levels) in <top (required)>'

  620) Given the default theme find_all finds all the installed themes
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/theme_spec.rb:12:in `block (2 levels) in <top (required)>'

  621) Trackback With the various trackback filters loaded and DNS mocked out appropriately Incomplete trackbacks should not be accepted
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/trackback_spec.rb:6:in `block (2 levels) in <top (required)>'

  622) Trackback With the various trackback filters loaded and DNS mocked out appropriately A valid trackback should be accepted
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/trackback_spec.rb:6:in `block (2 levels) in <top (required)>'

  623) Trackback With the various trackback filters loaded and DNS mocked out appropriately Trackbacks with a spammy link in the excerpt should be rejected
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/trackback_spec.rb:6:in `block (2 levels) in <top (required)>'

  624) Trackback With the various trackback filters loaded and DNS mocked out appropriately Trackbacks with a spammy source url should be rejected
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/trackback_spec.rb:6:in `block (2 levels) in <top (required)>'

  625) Trackback With the various trackback filters loaded and DNS mocked out appropriately Trackbacks from a spammy ip address should be rejected
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/trackback_spec.rb:6:in `block (2 levels) in <top (required)>'

  626) User With the contents and users fixtures loaded The various article finders work appropriately
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/user_spec.rb:45:in `block (3 levels) in <top (required)>'

  627) User#permalink_url 
     Failure/Error: before(:each) { Factory(:blog, :base_url => 'http://myblog.net/') }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/user_spec.rb:219:in `block (3 levels) in <top (required)>'

  628) articles/feedback_atom_feed.atom.builder with one trackback should render a valid feed
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/feedback_atom_feed_spec.rb:5:in `block (2 levels) in <top (required)>'

  629) articles/feedback_atom_feed.atom.builder with one trackback should render an Atom feed with one item
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/feedback_atom_feed_spec.rb:5:in `block (2 levels) in <top (required)>'

  630) articles/feedback_atom_feed.atom.builder with one trackback the trackback entry should have all the required attributes
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/feedback_atom_feed_spec.rb:5:in `block (2 levels) in <top (required)>'

  631) articles/feedback_atom_feed.atom.builder with a comment with problematic characters should render a valid feed
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/feedback_atom_feed_spec.rb:5:in `block (2 levels) in <top (required)>'

  632) articles/feedback_atom_feed.atom.builder with a comment with problematic characters should render an Atom feed with one item
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/feedback_atom_feed_spec.rb:5:in `block (2 levels) in <top (required)>'

  633) articles/index.html.erb without a theme normally should not have too many paragraph marks around body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  634) articles/index.html.erb without a theme normally should not have div nested inside p
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  635) articles/index.html.erb without a theme normally should not have extra escaped html
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  636) articles/index.html.erb without a theme normally renders the regular article partial twice
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  637) articles/index.html.erb without a theme normally does not render any password forms
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  638) articles/index.html.erb without a theme without search, on page 2 should not have pagination link to page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  639) articles/index.html.erb without a theme without search, on page 2 should have pagination link to page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  640) articles/index.html.erb without a theme when on page 2 of search should not have pagination link to search page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  641) articles/index.html.erb without a theme when on page 2 of search should have pagination link to search page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  642) articles/index.html.erb with theme standard_issue normally should not have too many paragraph marks around body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  643) articles/index.html.erb with theme standard_issue normally should not have div nested inside p
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  644) articles/index.html.erb with theme standard_issue normally should not have extra escaped html
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  645) articles/index.html.erb with theme standard_issue normally renders the regular article partial twice
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  646) articles/index.html.erb with theme standard_issue normally does not render any password forms
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  647) articles/index.html.erb with theme standard_issue without search, on page 2 should not have pagination link to page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  648) articles/index.html.erb with theme standard_issue without search, on page 2 should have pagination link to page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  649) articles/index.html.erb with theme standard_issue when on page 2 of search should not have pagination link to search page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  650) articles/index.html.erb with theme standard_issue when on page 2 of search should have pagination link to search page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  651) articles/index.html.erb with theme true-blue-3 normally should not have too many paragraph marks around body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  652) articles/index.html.erb with theme true-blue-3 normally should not have div nested inside p
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  653) articles/index.html.erb with theme true-blue-3 normally should not have extra escaped html
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  654) articles/index.html.erb with theme true-blue-3 normally renders the regular article partial twice
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  655) articles/index.html.erb with theme true-blue-3 normally does not render any password forms
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  656) articles/index.html.erb with theme true-blue-3 without search, on page 2 should not have pagination link to page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  657) articles/index.html.erb with theme true-blue-3 without search, on page 2 should have pagination link to page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  658) articles/index.html.erb with theme true-blue-3 when on page 2 of search should not have pagination link to search page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  659) articles/index.html.erb with theme true-blue-3 when on page 2 of search should have pagination link to search page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  660) articles/index.html.erb with theme typographic normally should not have too many paragraph marks around body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  661) articles/index.html.erb with theme typographic normally should not have div nested inside p
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  662) articles/index.html.erb with theme typographic normally should not have extra escaped html
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  663) articles/index.html.erb with theme typographic normally renders the regular article partial twice
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  664) articles/index.html.erb with theme typographic normally does not render any password forms
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  665) articles/index.html.erb with theme typographic without search, on page 2 should not have pagination link to page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  666) articles/index.html.erb with theme typographic without search, on page 2 should have pagination link to page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  667) articles/index.html.erb with theme typographic when on page 2 of search should not have pagination link to search page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  668) articles/index.html.erb with theme typographic when on page 2 of search should have pagination link to search page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  669) articles/index.html.erb with theme true-red normally should not have too many paragraph marks around body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  670) articles/index.html.erb with theme true-red normally should not have div nested inside p
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  671) articles/index.html.erb with theme true-red normally should not have extra escaped html
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  672) articles/index.html.erb with theme true-red normally renders the regular article partial twice
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  673) articles/index.html.erb with theme true-red normally does not render any password forms
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  674) articles/index.html.erb with theme true-red without search, on page 2 should not have pagination link to page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  675) articles/index.html.erb with theme true-red without search, on page 2 should have pagination link to page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  676) articles/index.html.erb with theme true-red when on page 2 of search should not have pagination link to search page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  677) articles/index.html.erb with theme true-red when on page 2 of search should have pagination link to search page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  678) articles/index.html.erb with theme bootstrap normally should not have too many paragraph marks around body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  679) articles/index.html.erb with theme bootstrap normally should not have div nested inside p
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  680) articles/index.html.erb with theme bootstrap normally should not have extra escaped html
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  681) articles/index.html.erb with theme bootstrap normally renders the regular article partial twice
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  682) articles/index.html.erb with theme bootstrap normally does not render any password forms
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  683) articles/index.html.erb with theme bootstrap without search, on page 2 should not have pagination link to page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  684) articles/index.html.erb with theme bootstrap without search, on page 2 should have pagination link to page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  685) articles/index.html.erb with theme bootstrap when on page 2 of search should not have pagination link to search page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  686) articles/index.html.erb with theme bootstrap when on page 2 of search should have pagination link to search page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  687) articles/index.html.erb with theme dirtylicious normally should not have too many paragraph marks around body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  688) articles/index.html.erb with theme dirtylicious normally should not have div nested inside p
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  689) articles/index.html.erb with theme dirtylicious normally should not have extra escaped html
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  690) articles/index.html.erb with theme dirtylicious normally renders the regular article partial twice
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  691) articles/index.html.erb with theme dirtylicious normally does not render any password forms
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  692) articles/index.html.erb with theme dirtylicious without search, on page 2 should not have pagination link to page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  693) articles/index.html.erb with theme dirtylicious without search, on page 2 should have pagination link to page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  694) articles/index.html.erb with theme dirtylicious when on page 2 of search should not have pagination link to search page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  695) articles/index.html.erb with theme dirtylicious when on page 2 of search should have pagination link to search page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  696) articles/index.html.erb with theme scribbish normally should not have too many paragraph marks around body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  697) articles/index.html.erb with theme scribbish normally should not have div nested inside p
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  698) articles/index.html.erb with theme scribbish normally should not have extra escaped html
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  699) articles/index.html.erb with theme scribbish normally renders the regular article partial twice
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  700) articles/index.html.erb with theme scribbish normally does not render any password forms
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  701) articles/index.html.erb with theme scribbish without search, on page 2 should not have pagination link to page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  702) articles/index.html.erb with theme scribbish without search, on page 2 should have pagination link to page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  703) articles/index.html.erb with theme scribbish when on page 2 of search should not have pagination link to search page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  704) articles/index.html.erb with theme scribbish when on page 2 of search should have pagination link to search page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  705) First dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:46
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  706) First dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:46
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  707) First dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:46
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  708) First dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:46
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  709) First dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:46
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  710) Second dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:54
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  711) Second dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:54
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  712) Second dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:54
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  713) Second dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:54
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  714) Second dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:54
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  715) Dodgy comment #3 it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:62
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  716) Dodgy comment #3 it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:62
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  717) Dodgy comment #3 it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:62
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  718) Dodgy comment #3 it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:62
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  719) Dodgy comment #3 it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:62
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  720) Extra Dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:70
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  721) Extra Dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:70
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  722) Extra Dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:70
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  723) Extra Dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:70
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  724) Extra Dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:70
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  725) XSS1 it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:80
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  726) XSS1 it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:80
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  727) XSS1 it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:80
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  728) XSS1 it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:80
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  729) XSS1 it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:80
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  730) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:88
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  731) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:88
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  732) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:88
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  733) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:88
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  734) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:88
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  735) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:95
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  736) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:95
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  737) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:95
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  738) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:95
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  739) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:95
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  740) Comment with bare http URL it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:103
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  741) Comment with bare http URL it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:103
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  742) Comment with bare http URL it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:103
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  743) Comment with bare http URL it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:103
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  744) Comment with bare http URL it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:103
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  745) Comment with bare email address it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:111
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  746) Comment with bare email address it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:111
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  747) Comment with bare email address it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:111
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  748) Comment with bare email address it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:111
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  749) Comment with bare email address it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:111
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  750) First dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:163
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  751) First dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:163
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  752) First dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:163
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  753) First dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:163
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  754) First dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:163
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  755) Second dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:171
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  756) Second dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:171
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  757) Second dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:171
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  758) Second dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:171
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  759) Second dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:171
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  760) Dodgy comment #3 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:179
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  761) Dodgy comment #3 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:179
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  762) Dodgy comment #3 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:179
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  763) Dodgy comment #3 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:179
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  764) Dodgy comment #3 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:179
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  765) Extra Dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:187
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  766) Extra Dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:187
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  767) Extra Dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:187
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  768) Extra Dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:187
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  769) Extra Dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:187
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  770) XSS1 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:197
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  771) XSS1 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:197
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  772) XSS1 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:197
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  773) XSS1 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:197
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  774) XSS1 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:197
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  775) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:205
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  776) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:205
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  777) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:205
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  778) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:205
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  779) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:205
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  780) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:212
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  781) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:212
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  782) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:212
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  783) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:212
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  784) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:212
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  785) Comment with bare http URL with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:220
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  786) Comment with bare http URL with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:220
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  787) Comment with bare http URL with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:220
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  788) Comment with bare http URL with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:220
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  789) Comment with bare http URL with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:220
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  790) Comment with bare email address with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:228
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  791) Comment with bare email address with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:228
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  792) Comment with bare email address with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:228
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  793) Comment with bare email address with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:228
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  794) Comment with bare email address with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:228
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  795) layouts/default.html.erb with theme standard_issue when use_meta_keyword set to true renders assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:21:in `block (5 levels) in <top (required)>'

  796) layouts/default.html.erb with theme standard_issue when use_meta_keyword set to false does not render assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:32:in `block (5 levels) in <top (required)>'

  797) layouts/default.html.erb with theme true-blue-3 when use_meta_keyword set to true renders assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:21:in `block (5 levels) in <top (required)>'

  798) layouts/default.html.erb with theme true-blue-3 when use_meta_keyword set to false does not render assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:32:in `block (5 levels) in <top (required)>'

  799) layouts/default.html.erb with theme typographic when use_meta_keyword set to true renders assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:21:in `block (5 levels) in <top (required)>'

  800) layouts/default.html.erb with theme typographic when use_meta_keyword set to false does not render assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:32:in `block (5 levels) in <top (required)>'

  801) layouts/default.html.erb with theme true-red when use_meta_keyword set to true renders assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:21:in `block (5 levels) in <top (required)>'

  802) layouts/default.html.erb with theme true-red when use_meta_keyword set to false does not render assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:32:in `block (5 levels) in <top (required)>'

  803) layouts/default.html.erb with theme bootstrap when use_meta_keyword set to true renders assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:21:in `block (5 levels) in <top (required)>'

  804) layouts/default.html.erb with theme bootstrap when use_meta_keyword set to false does not render assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:32:in `block (5 levels) in <top (required)>'

  805) layouts/default.html.erb with theme dirtylicious when use_meta_keyword set to true renders assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:21:in `block (5 levels) in <top (required)>'

  806) layouts/default.html.erb with theme dirtylicious when use_meta_keyword set to false does not render assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:32:in `block (5 levels) in <top (required)>'

  807) layouts/default.html.erb with theme scribbish when use_meta_keyword set to true renders assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:21:in `block (5 levels) in <top (required)>'

  808) layouts/default.html.erb with theme scribbish when use_meta_keyword set to false does not render assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:32:in `block (5 levels) in <top (required)>'

52 deprecation warnings total

Finished in 20.6 seconds
1230 examples, 808 failures, 3 pending
Coverage report generated for RSpec to /home/ec2-user/environment/typo/coverage. 11688 / 15419 LOC (75.8%) covered.
